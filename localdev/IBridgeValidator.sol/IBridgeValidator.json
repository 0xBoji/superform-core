{"abi":[{"type":"function","name":"decodeAmountIn","inputs":[{"name":"txData_","type":"bytes","internalType":"bytes"},{"name":"genericSwapDisallowed_","type":"bool","internalType":"bool"}],"outputs":[{"name":"amount_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decodeDstSwap","inputs":[{"name":"txData_","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"token_","type":"address","internalType":"address"},{"name":"amount_","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"decodeSwapOutputToken","inputs":[{"name":"txData_","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"token_","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"validateReceiver","inputs":[{"name":"txData_","type":"bytes","internalType":"bytes"},{"name":"receiver_","type":"address","internalType":"address"}],"outputs":[{"name":"valid_","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"validateTxData","inputs":[{"name":"args_","type":"tuple","internalType":"struct IBridgeValidator.ValidateTxDataArgs","components":[{"name":"txData","type":"bytes","internalType":"bytes"},{"name":"srcChainId","type":"uint64","internalType":"uint64"},{"name":"dstChainId","type":"uint64","internalType":"uint64"},{"name":"liqDstChainId","type":"uint64","internalType":"uint64"},{"name":"deposit","type":"bool","internalType":"bool"},{"name":"superform","type":"address","internalType":"address"},{"name":"receiverAddress","type":"address","internalType":"address"},{"name":"liqDataToken","type":"address","internalType":"address"},{"name":"liqDataInterimToken","type":"address","internalType":"address"}]}],"outputs":[{"name":"hasDstSwap","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"decodeAmountIn(bytes,bool)":"9bbbb5c8","decodeDstSwap(bytes)":"3d898b1e","decodeSwapOutputToken(bytes)":"2db88323","validateReceiver(bytes,address)":"1d51a3d7","validateTxData((bytes,uint64,uint64,uint64,bool,address,address,address,address))":"c87439eb"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData_\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"genericSwapDisallowed_\",\"type\":\"bool\"}],\"name\":\"decodeAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData_\",\"type\":\"bytes\"}],\"name\":\"decodeDstSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData_\",\"type\":\"bytes\"}],\"name\":\"decodeSwapOutputToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txData_\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"validateReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"txData\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liqDstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"superform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liqDataToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liqDataInterimToken\",\"type\":\"address\"}],\"internalType\":\"struct IBridgeValidator.ValidateTxDataArgs\",\"name\":\"args_\",\"type\":\"tuple\"}],\"name\":\"validateTxData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDstSwap\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeropoint Labs\",\"details\":\"Interface all Bridge Validators must follow\",\"kind\":\"dev\",\"methods\":{\"decodeAmountIn(bytes,bool)\":{\"details\":\"decodes the txData and returns the amount of input token on source\",\"params\":{\"genericSwapDisallowed_\":\"true if generic swaps are disallowed\",\"txData_\":\"is the txData of the cross chain deposit\"},\"returns\":{\"amount_\":\"the amount expected\"}},\"decodeDstSwap(bytes)\":{\"details\":\"decodes neccesary information for processing swaps on the destination chain\",\"params\":{\"txData_\":\"is the txData to be decoded\"},\"returns\":{\"amount_\":\"the amount expected\",\"token_\":\"is the address of the token\"}},\"decodeSwapOutputToken(bytes)\":{\"details\":\"decodes the final output token address (for only direct chain actions!)\",\"params\":{\"txData_\":\"is the txData to be decoded\"},\"returns\":{\"token_\":\"the address of the token\"}},\"validateReceiver(bytes,address)\":{\"details\":\"validates the receiver of the liquidity request\",\"params\":{\"receiver_\":\"is the address of the receiver to validate\",\"txData_\":\"is the txData of the cross chain deposit\"},\"returns\":{\"valid_\":\"if the address is valid\"}},\"validateTxData((bytes,uint64,uint64,uint64,bool,address,address,address,address))\":{\"details\":\"validates the txData of a cross chain deposit\",\"params\":{\"args_\":\"the txData arguments to validate in txData\"},\"returns\":{\"hasDstSwap\":\"if the txData contains a destination swap\"}}},\"title\":\"Bridge Validator Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IBridgeValidator.sol\":\"IBridgeValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/interfaces/IBridgeValidator.sol\":{\"keccak256\":\"0x4ccfb38b5481dbb933892feefcd494af7c7fe098f9a8335318e5e4e149dea06d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0efdf190c78d2b20b1dbe42b25ae8a59a57080408e224ced1205231e2a538fbc\",\"dweb:/ipfs/Qmagf4t5KMZV4WbQm3PdhcQ3REVXSPyMdHyHDCZxWHt9wr\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"txData_","type":"bytes"},{"internalType":"bool","name":"genericSwapDisallowed_","type":"bool"}],"stateMutability":"view","type":"function","name":"decodeAmountIn","outputs":[{"internalType":"uint256","name":"amount_","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"txData_","type":"bytes"}],"stateMutability":"pure","type":"function","name":"decodeDstSwap","outputs":[{"internalType":"address","name":"token_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"txData_","type":"bytes"}],"stateMutability":"pure","type":"function","name":"decodeSwapOutputToken","outputs":[{"internalType":"address","name":"token_","type":"address"}]},{"inputs":[{"internalType":"bytes","name":"txData_","type":"bytes"},{"internalType":"address","name":"receiver_","type":"address"}],"stateMutability":"view","type":"function","name":"validateReceiver","outputs":[{"internalType":"bool","name":"valid_","type":"bool"}]},{"inputs":[{"internalType":"struct IBridgeValidator.ValidateTxDataArgs","name":"args_","type":"tuple","components":[{"internalType":"bytes","name":"txData","type":"bytes"},{"internalType":"uint64","name":"srcChainId","type":"uint64"},{"internalType":"uint64","name":"dstChainId","type":"uint64"},{"internalType":"uint64","name":"liqDstChainId","type":"uint64"},{"internalType":"bool","name":"deposit","type":"bool"},{"internalType":"address","name":"superform","type":"address"},{"internalType":"address","name":"receiverAddress","type":"address"},{"internalType":"address","name":"liqDataToken","type":"address"},{"internalType":"address","name":"liqDataInterimToken","type":"address"}]}],"stateMutability":"view","type":"function","name":"validateTxData","outputs":[{"internalType":"bool","name":"hasDstSwap","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"decodeAmountIn(bytes,bool)":{"details":"decodes the txData and returns the amount of input token on source","params":{"genericSwapDisallowed_":"true if generic swaps are disallowed","txData_":"is the txData of the cross chain deposit"},"returns":{"amount_":"the amount expected"}},"decodeDstSwap(bytes)":{"details":"decodes neccesary information for processing swaps on the destination chain","params":{"txData_":"is the txData to be decoded"},"returns":{"amount_":"the amount expected","token_":"is the address of the token"}},"decodeSwapOutputToken(bytes)":{"details":"decodes the final output token address (for only direct chain actions!)","params":{"txData_":"is the txData to be decoded"},"returns":{"token_":"the address of the token"}},"validateReceiver(bytes,address)":{"details":"validates the receiver of the liquidity request","params":{"receiver_":"is the address of the receiver to validate","txData_":"is the txData of the cross chain deposit"},"returns":{"valid_":"if the address is valid"}},"validateTxData((bytes,uint64,uint64,uint64,bool,address,address,address,address))":{"details":"validates the txData of a cross chain deposit","params":{"args_":"the txData arguments to validate in txData"},"returns":{"hasDstSwap":"if the txData contains a destination swap"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IBridgeValidator.sol":"IBridgeValidator"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IBridgeValidator.sol":{"keccak256":"0x4ccfb38b5481dbb933892feefcd494af7c7fe098f9a8335318e5e4e149dea06d","urls":["bzz-raw://0efdf190c78d2b20b1dbe42b25ae8a59a57080408e224ced1205231e2a538fbc","dweb:/ipfs/Qmagf4t5KMZV4WbQm3PdhcQ3REVXSPyMdHyHDCZxWHt9wr"],"license":"BUSL-1.1"}},"version":1},"id":146}