{"abi":[{"type":"function","name":"batchProcessTx","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"},{"name":"indices_","type":"uint256[]","internalType":"uint256[]"},{"name":"bridgeIds_","type":"uint8[]","internalType":"uint8[]"},{"name":"txDatas_","type":"bytes[]","internalType":"bytes[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"batchUpdateFailedTx","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"},{"name":"indices_","type":"uint256[]","internalType":"uint256[]"},{"name":"interimTokens_","type":"address[]","internalType":"address[]"},{"name":"amounts_","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getPostDstSwapFailureUpdatedTokenAmount","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"},{"name":"index_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"interimToken","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"processFailedTx","inputs":[{"name":"user_","type":"address","internalType":"address"},{"name":"interimToken_","type":"address","internalType":"address"},{"name":"amount_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"processTx","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"},{"name":"bridgeId_","type":"uint8","internalType":"uint8"},{"name":"txData_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"swappedAmount","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"},{"name":"index_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"updateFailedTx","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"},{"name":"interimToken_","type":"address","internalType":"address"},{"name":"amount_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"SuperRegistryUpdated","inputs":[{"name":"superRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"SwapFailed","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"index","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"intermediaryToken","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SwapProcessed","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"index","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"bridgeId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"finalAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchProcessTx(uint256,uint256[],uint8[],bytes[])":"fdfc1083","batchUpdateFailedTx(uint256,uint256[],address[],uint256[])":"c4e690e4","getPostDstSwapFailureUpdatedTokenAmount(uint256,uint256)":"95c2c5d7","processFailedTx(address,address,uint256)":"10d7d359","processTx(uint256,uint8,bytes)":"69eaf2d5","swappedAmount(uint256,uint256)":"c830c85a","updateFailedTx(uint256,address,uint256)":"a0d82da6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superRegistry\",\"type\":\"address\"}],\"name\":\"SuperRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"intermediaryToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bridgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"}],\"name\":\"SwapProcessed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indices_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"bridgeIds_\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"txDatas_\",\"type\":\"bytes[]\"}],\"name\":\"batchProcessTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"indices_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"interimTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateFailedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"getPostDstSwapFailureUpdatedTokenAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"interimToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interimToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"processFailedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bridgeId_\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"txData_\",\"type\":\"bytes\"}],\"name\":\"processTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"swappedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"interimToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"updateFailedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeropoint Labs\",\"details\":\"Interface for DstSwapper\",\"events\":{\"SuperRegistryUpdated(address)\":{\"details\":\"is emitted when the super registry is updated.\"},\"SwapFailed(uint256,uint256,address,uint256)\":{\"details\":\"is emitted when a dst swap fails and intermediary tokens are sent to CoreStateRegistry for rescue\"},\"SwapProcessed(uint256,uint256,uint256,uint256)\":{\"details\":\"is emitted when a dst swap transaction is processed\"}},\"kind\":\"dev\",\"methods\":{\"batchProcessTx(uint256,uint256[],uint8[],bytes[])\":{\"params\":{\"bridgeIds_\":\"represents the array of ids of liquidity bridges used\",\"indices_\":\"represents the index of the superformid in the payload\",\"payloadId_\":\"represents the array of payload ids used\",\"txDatas_\":\"represents the array of transaction data generated by liquidity bridge API\"}},\"batchUpdateFailedTx(uint256,uint256[],address[],uint256[])\":{\"params\":{\"amounts_\":\"are the amount of intermediary tokens that need to be refunded to the user\",\"indices_\":\"represents the failing indices in the payload\",\"interimTokens_\":\"is the list of intermediary tokens that cannot be swapped\",\"payloadId_\":\"represents the id of the payload\"}},\"getPostDstSwapFailureUpdatedTokenAmount(uint256,uint256)\":{\"params\":{\"index_\":\"represents the index in the payload (0 for single vault payload)\",\"payloadId_\":\"is the id of payload\"},\"returns\":{\"amount\":\"is the amount of interim token to be refunded\",\"interimToken\":\"is the token that is to be refunded\"}},\"processFailedTx(address,address,uint256)\":{\"params\":{\"amount_\":\"is the refund amount\",\"interimToken_\":\"is the refund token\",\"user_\":\"is the final refund receiver of the interimToken_\"}},\"processTx(uint256,uint8,bytes)\":{\"params\":{\"bridgeId_\":\"represents the id of liquidity bridge used\",\"payloadId_\":\"represents the id of the payload\",\"txData_\":\"represents the transaction data generated by liquidity bridge API.\"}},\"swappedAmount(uint256,uint256)\":{\"params\":{\"index_\":\"represents the index in the payload (0 for single vault payload)\",\"payloadId_\":\"is the id of payload\"},\"returns\":{\"amount\":\"is the amount forwarded to core state registry after the swap\"}},\"updateFailedTx(uint256,address,uint256)\":{\"params\":{\"amount_\":\"is the amount of the intermediary token\",\"interimToken_\":\"is the intermediary token that cannot be swapped to the vault underlying\",\"payloadId_\":\"represents the id of the payload\"}}},\"title\":\"IDstSwapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchProcessTx(uint256,uint256[],uint8[],bytes[])\":{\"notice\":\"will process dst swaps in batch through a liquidity bridge\"},\"batchUpdateFailedTx(uint256,uint256[],address[],uint256[])\":{\"notice\":\"updates the amounts of intermediary tokens stuck because of failing dst swap in batch\"},\"getPostDstSwapFailureUpdatedTokenAmount(uint256,uint256)\":{\"notice\":\"returns the interim amounts (if dst swap is failing)\"},\"processFailedTx(address,address,uint256)\":{\"notice\":\"is a privileged function that allows Core State Registry to process refunds\"},\"processTx(uint256,uint8,bytes)\":{\"notice\":\"will process dst swap through a liquidity bridge\"},\"swappedAmount(uint256,uint256)\":{\"notice\":\"returns the swapped amounts (if dst swap is successful)\"},\"updateFailedTx(uint256,address,uint256)\":{\"notice\":\"updates the amounts of intermediary tokens stuck because of failing dst swap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IDstSwapper.sol\":\"IDstSwapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/interfaces/IDstSwapper.sol\":{\"keccak256\":\"0x8deec47d80857584e83f09bdc4402aeb64a7f97af4607adee2e67cd2e78ced2a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://529dbf596d90b9bf3c0cb393ecd71abf8bca2da55bbb0b4f8549764a00f0651f\",\"dweb:/ipfs/QmdRKzkvoRjYdw2qLdZZttZzEWnYc7jhgBE5LMhi6A3jXA\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"superRegistry","type":"address","indexed":true}],"type":"event","name":"SuperRegistryUpdated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true},{"internalType":"uint256","name":"index","type":"uint256","indexed":true},{"internalType":"address","name":"intermediaryToken","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"SwapFailed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true},{"internalType":"uint256","name":"index","type":"uint256","indexed":true},{"internalType":"uint256","name":"bridgeId","type":"uint256","indexed":true},{"internalType":"uint256","name":"finalAmount","type":"uint256","indexed":false}],"type":"event","name":"SwapProcessed","anonymous":false},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"},{"internalType":"uint256[]","name":"indices_","type":"uint256[]"},{"internalType":"uint8[]","name":"bridgeIds_","type":"uint8[]"},{"internalType":"bytes[]","name":"txDatas_","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function","name":"batchProcessTx"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"},{"internalType":"uint256[]","name":"indices_","type":"uint256[]"},{"internalType":"address[]","name":"interimTokens_","type":"address[]"},{"internalType":"uint256[]","name":"amounts_","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"batchUpdateFailedTx"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"},{"internalType":"uint256","name":"index_","type":"uint256"}],"stateMutability":"view","type":"function","name":"getPostDstSwapFailureUpdatedTokenAmount","outputs":[{"internalType":"address","name":"interimToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user_","type":"address"},{"internalType":"address","name":"interimToken_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"processFailedTx"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"},{"internalType":"uint8","name":"bridgeId_","type":"uint8"},{"internalType":"bytes","name":"txData_","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"processTx"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"},{"internalType":"uint256","name":"index_","type":"uint256"}],"stateMutability":"view","type":"function","name":"swappedAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"},{"internalType":"address","name":"interimToken_","type":"address"},{"internalType":"uint256","name":"amount_","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"updateFailedTx"}],"devdoc":{"kind":"dev","methods":{"batchProcessTx(uint256,uint256[],uint8[],bytes[])":{"params":{"bridgeIds_":"represents the array of ids of liquidity bridges used","indices_":"represents the index of the superformid in the payload","payloadId_":"represents the array of payload ids used","txDatas_":"represents the array of transaction data generated by liquidity bridge API"}},"batchUpdateFailedTx(uint256,uint256[],address[],uint256[])":{"params":{"amounts_":"are the amount of intermediary tokens that need to be refunded to the user","indices_":"represents the failing indices in the payload","interimTokens_":"is the list of intermediary tokens that cannot be swapped","payloadId_":"represents the id of the payload"}},"getPostDstSwapFailureUpdatedTokenAmount(uint256,uint256)":{"params":{"index_":"represents the index in the payload (0 for single vault payload)","payloadId_":"is the id of payload"},"returns":{"amount":"is the amount of interim token to be refunded","interimToken":"is the token that is to be refunded"}},"processFailedTx(address,address,uint256)":{"params":{"amount_":"is the refund amount","interimToken_":"is the refund token","user_":"is the final refund receiver of the interimToken_"}},"processTx(uint256,uint8,bytes)":{"params":{"bridgeId_":"represents the id of liquidity bridge used","payloadId_":"represents the id of the payload","txData_":"represents the transaction data generated by liquidity bridge API."}},"swappedAmount(uint256,uint256)":{"params":{"index_":"represents the index in the payload (0 for single vault payload)","payloadId_":"is the id of payload"},"returns":{"amount":"is the amount forwarded to core state registry after the swap"}},"updateFailedTx(uint256,address,uint256)":{"params":{"amount_":"is the amount of the intermediary token","interimToken_":"is the intermediary token that cannot be swapped to the vault underlying","payloadId_":"represents the id of the payload"}}},"version":1},"userdoc":{"kind":"user","methods":{"batchProcessTx(uint256,uint256[],uint8[],bytes[])":{"notice":"will process dst swaps in batch through a liquidity bridge"},"batchUpdateFailedTx(uint256,uint256[],address[],uint256[])":{"notice":"updates the amounts of intermediary tokens stuck because of failing dst swap in batch"},"getPostDstSwapFailureUpdatedTokenAmount(uint256,uint256)":{"notice":"returns the interim amounts (if dst swap is failing)"},"processFailedTx(address,address,uint256)":{"notice":"is a privileged function that allows Core State Registry to process refunds"},"processTx(uint256,uint8,bytes)":{"notice":"will process dst swap through a liquidity bridge"},"swappedAmount(uint256,uint256)":{"notice":"returns the swapped amounts (if dst swap is successful)"},"updateFailedTx(uint256,address,uint256)":{"notice":"updates the amounts of intermediary tokens stuck because of failing dst swap"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IDstSwapper.sol":"IDstSwapper"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IDstSwapper.sol":{"keccak256":"0x8deec47d80857584e83f09bdc4402aeb64a7f97af4607adee2e67cd2e78ced2a","urls":["bzz-raw://529dbf596d90b9bf3c0cb393ecd71abf8bca2da55bbb0b4f8549764a00f0651f","dweb:/ipfs/QmdRKzkvoRjYdw2qLdZZttZzEWnYc7jhgBE5LMhi6A3jXA"],"license":"BUSL-1.1"}},"version":1},"id":150}