{"abi":[{"type":"function","name":"authorizeMintWithCode","inputs":[{"name":"_auth_code","type":"uint32","internalType":"uint32"},{"name":"_dst","type":"address","internalType":"address"},{"name":"_metadata_cid","type":"string","internalType":"string"},{"name":"_expiry","type":"uint256","internalType":"uint256"},{"name":"_seconds_to_pay","type":"uint32","internalType":"uint32"},{"name":"_verification_tier","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getRequiredMintCostForCode","inputs":[{"name":"_auth_code","type":"uint32","internalType":"uint32"},{"name":"_dst","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getRequiredMintCostForSeconds","inputs":[{"name":"_seconds","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getSubscriptionCostPerYearUSD","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"hasValidToken","inputs":[{"name":"_addr","type":"address","internalType":"address"}],"outputs":[{"name":"valid","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"mintWithCode","inputs":[{"name":"_auth_code","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"mintWithSignature","inputs":[{"name":"_auth_code","type":"uint32","internalType":"uint32"},{"name":"_metadata_cid","type":"string","internalType":"string"},{"name":"_expiry","type":"uint256","internalType":"uint256"},{"name":"_seconds_to_pay","type":"uint32","internalType":"uint32"},{"name":"_verification_tier","type":"string","internalType":"string"},{"name":"_signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"setVerifiedToken","inputs":[{"name":"_tokenId","type":"uint256","internalType":"uint256"},{"name":"_verified","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"tokenExpiry","inputs":[{"name":"_tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"expiry","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"tokenTier","inputs":[{"name":"_tokenId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"tier","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"updateExpiry","inputs":[{"name":"_tokenId","type":"uint256","internalType":"uint256"},{"name":"_expiry","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"authorizeMintWithCode(uint32,address,string,uint256,uint32,string)":"b4385c53","getRequiredMintCostForCode(uint32,address)":"f82bacf0","getRequiredMintCostForSeconds(uint32)":"714d52dd","getSubscriptionCostPerYearUSD()":"b570e003","hasValidToken(address)":"9d267630","mintWithCode(uint32)":"71bff8e4","mintWithSignature(uint32,string,uint256,uint32,string,bytes)":"fd50c6ee","setVerifiedToken(uint256,bool)":"fa4a2fd6","tokenExpiry(uint256)":"acced426","tokenTier(uint256)":"649e705f","updateExpiry(uint256,uint256)":"fd51d13c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_auth_code\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_metadata_cid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_seconds_to_pay\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_verification_tier\",\"type\":\"string\"}],\"name\":\"authorizeMintWithCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_auth_code\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"}],\"name\":\"getRequiredMintCostForCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_seconds\",\"type\":\"uint32\"}],\"name\":\"getRequiredMintCostForSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionCostPerYearUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"hasValidToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_auth_code\",\"type\":\"uint32\"}],\"name\":\"mintWithCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_auth_code\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_metadata_cid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_seconds_to_pay\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_verification_tier\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mintWithSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_verified\",\"type\":\"bool\"}],\"name\":\"setVerifiedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenTier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tier\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"updateExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorizeMintWithCode(uint32,address,string,uint256,uint32,string)\":{\"details\":\"Authorize the minting of a new token\",\"params\":{\"_auth_code\":\"The auth code used to authorize the mint\",\"_dst\":\"Address to mint the token to\",\"_expiry\":\"The time, in secs since epoch, at which to set the token's expiry on mint\",\"_metadata_cid\":\"The metadata CID for the token\",\"_seconds_to_pay\":\"The number of seconds of subscription time that need to be paid for when the token is minted\",\"_verification_tier\":\"The verification tier of the token\"}},\"getRequiredMintCostForCode(uint32,address)\":{\"details\":\"Returns the amount in NATIVE (wei) which is expected for a given mint which uses an auth code\",\"params\":{\"_auth_code\":\"The auth code used to authorize the mint\",\"_dst\":\"Address to mint the token to\"}},\"getRequiredMintCostForSeconds(uint32)\":{\"details\":\"Returns the amount in NATIVE (wei) which is expected for a given amount of subscription time in seconds\",\"params\":{\"_seconds\":\"The number of seconds of subscription time to calculate the cost for\"}},\"getSubscriptionCostPerYearUSD()\":{\"details\":\"Returns the cost for subscription per year in USD, to SUBSCRIPTION_COST_DECIMALS decimal places\"},\"hasValidToken(address)\":{\"details\":\"Check whether a given address has ANY token which is valid,      i.e. is verified and has an expiry in the future\",\"params\":{\"_addr\":\"Address to check for tokens\"},\"returns\":{\"valid\":\"Whether the address has a valid token\"}},\"mintWithCode(uint32)\":{\"details\":\"Mint the token by using an authorization code from an authorized account\",\"params\":{\"_auth_code\":\"The auth code used to authorize the mint\"}},\"mintWithSignature(uint32,string,uint256,uint32,string,bytes)\":{\"details\":\"Mint the token using a signature to verify authorization\",\"params\":{\"_auth_code\":\"The auth code used to authorize the mint\",\"_expiry\":\"The time, in secs since epoch, at which to set the token's expiry on mint\",\"_metadata_cid\":\"The metadata CID for the token\",\"_seconds_to_pay\":\"The number of seconds of subscription time that need to be paid for when the token is minted\",\"_signature\":\"The signature by the minting authority for this mint\",\"_verification_tier\":\"The verification tier of the token\"}},\"setVerifiedToken(uint256,bool)\":{\"details\":\"Set whether a token is verified or not\",\"params\":{\"_tokenId\":\"ID of the token\",\"_verified\":\"A bool indicating whether this token is verified\"}},\"tokenExpiry(uint256)\":{\"details\":\"Get the current expiry of a specific token in secs since epoch\",\"params\":{\"_tokenId\":\"ID of the token to query\"},\"returns\":{\"expiry\":\"The expiry of the given token in secs since epoch\"}},\"tokenTier(uint256)\":{\"details\":\"Get the verification tier of a specific token\",\"params\":{\"_tokenId\":\"ID of the token to query\"},\"returns\":{\"tier\":\"The tier of the given token\"}},\"updateExpiry(uint256,uint256)\":{\"details\":\"Update the given token to a new expiry\",\"params\":{\"_expiry\":\"New expiry date for the token in secs since epoch\",\"_tokenId\":\"ID of the token whose expiry should be updated\"}}},\"title\":\"A standard interface for checking and updating the expiry and validity of KYC Non-transferable NFTs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vendor/kycDAO/IKycDAONTNFT.sol\":\"IKycdaoNTNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/vendor/kycDAO/IKycDAONTNFT.sol\":{\"keccak256\":\"0x84a7f7331bd0a1761fde96a366d25c3dbbbd40835caea48a759d27e1e554af1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbb470e21810eaefda075a79b407a562eda238b43b6bbfae10de74e79c648a4a\",\"dweb:/ipfs/QmZ4ApdK9NvBYnyF2p32YzSF3DmZDtsgouJSMagDmPL3sd\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint32","name":"_auth_code","type":"uint32"},{"internalType":"address","name":"_dst","type":"address"},{"internalType":"string","name":"_metadata_cid","type":"string"},{"internalType":"uint256","name":"_expiry","type":"uint256"},{"internalType":"uint32","name":"_seconds_to_pay","type":"uint32"},{"internalType":"string","name":"_verification_tier","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"authorizeMintWithCode"},{"inputs":[{"internalType":"uint32","name":"_auth_code","type":"uint32"},{"internalType":"address","name":"_dst","type":"address"}],"stateMutability":"view","type":"function","name":"getRequiredMintCostForCode","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint32","name":"_seconds","type":"uint32"}],"stateMutability":"view","type":"function","name":"getRequiredMintCostForSeconds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getSubscriptionCostPerYearUSD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_addr","type":"address"}],"stateMutability":"view","type":"function","name":"hasValidToken","outputs":[{"internalType":"bool","name":"valid","type":"bool"}]},{"inputs":[{"internalType":"uint32","name":"_auth_code","type":"uint32"}],"stateMutability":"payable","type":"function","name":"mintWithCode"},{"inputs":[{"internalType":"uint32","name":"_auth_code","type":"uint32"},{"internalType":"string","name":"_metadata_cid","type":"string"},{"internalType":"uint256","name":"_expiry","type":"uint256"},{"internalType":"uint32","name":"_seconds_to_pay","type":"uint32"},{"internalType":"string","name":"_verification_tier","type":"string"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"stateMutability":"payable","type":"function","name":"mintWithSignature"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bool","name":"_verified","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setVerifiedToken"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"tokenExpiry","outputs":[{"internalType":"uint256","name":"expiry","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"stateMutability":"view","type":"function","name":"tokenTier","outputs":[{"internalType":"string","name":"tier","type":"string"}]},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_expiry","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"updateExpiry"}],"devdoc":{"kind":"dev","methods":{"authorizeMintWithCode(uint32,address,string,uint256,uint32,string)":{"details":"Authorize the minting of a new token","params":{"_auth_code":"The auth code used to authorize the mint","_dst":"Address to mint the token to","_expiry":"The time, in secs since epoch, at which to set the token's expiry on mint","_metadata_cid":"The metadata CID for the token","_seconds_to_pay":"The number of seconds of subscription time that need to be paid for when the token is minted","_verification_tier":"The verification tier of the token"}},"getRequiredMintCostForCode(uint32,address)":{"details":"Returns the amount in NATIVE (wei) which is expected for a given mint which uses an auth code","params":{"_auth_code":"The auth code used to authorize the mint","_dst":"Address to mint the token to"}},"getRequiredMintCostForSeconds(uint32)":{"details":"Returns the amount in NATIVE (wei) which is expected for a given amount of subscription time in seconds","params":{"_seconds":"The number of seconds of subscription time to calculate the cost for"}},"getSubscriptionCostPerYearUSD()":{"details":"Returns the cost for subscription per year in USD, to SUBSCRIPTION_COST_DECIMALS decimal places"},"hasValidToken(address)":{"details":"Check whether a given address has ANY token which is valid,      i.e. is verified and has an expiry in the future","params":{"_addr":"Address to check for tokens"},"returns":{"valid":"Whether the address has a valid token"}},"mintWithCode(uint32)":{"details":"Mint the token by using an authorization code from an authorized account","params":{"_auth_code":"The auth code used to authorize the mint"}},"mintWithSignature(uint32,string,uint256,uint32,string,bytes)":{"details":"Mint the token using a signature to verify authorization","params":{"_auth_code":"The auth code used to authorize the mint","_expiry":"The time, in secs since epoch, at which to set the token's expiry on mint","_metadata_cid":"The metadata CID for the token","_seconds_to_pay":"The number of seconds of subscription time that need to be paid for when the token is minted","_signature":"The signature by the minting authority for this mint","_verification_tier":"The verification tier of the token"}},"setVerifiedToken(uint256,bool)":{"details":"Set whether a token is verified or not","params":{"_tokenId":"ID of the token","_verified":"A bool indicating whether this token is verified"}},"tokenExpiry(uint256)":{"details":"Get the current expiry of a specific token in secs since epoch","params":{"_tokenId":"ID of the token to query"},"returns":{"expiry":"The expiry of the given token in secs since epoch"}},"tokenTier(uint256)":{"details":"Get the verification tier of a specific token","params":{"_tokenId":"ID of the token to query"},"returns":{"tier":"The tier of the given token"}},"updateExpiry(uint256,uint256)":{"details":"Update the given token to a new expiry","params":{"_expiry":"New expiry date for the token in secs since epoch","_tokenId":"ID of the token whose expiry should be updated"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/vendor/kycDAO/IKycDAONTNFT.sol":"IKycdaoNTNFT"},"evmVersion":"paris","libraries":{}},"sources":{"src/vendor/kycDAO/IKycDAONTNFT.sol":{"keccak256":"0x84a7f7331bd0a1761fde96a366d25c3dbbbd40835caea48a759d27e1e554af1b","urls":["bzz-raw://bbb470e21810eaefda075a79b407a562eda238b43b6bbfae10de74e79c648a4a","dweb:/ipfs/QmZ4ApdK9NvBYnyF2p32YzSF3DmZDtsgouJSMagDmPL3sd"],"license":"MIT"}},"version":1},"id":191}