{"abi":[{"type":"function","name":"CHAIN_ID","inputs":[],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"dispatchPayload","inputs":[{"name":"srcSender_","type":"address","internalType":"address"},{"name":"ambIds_","type":"uint8[]","internalType":"uint8[]"},{"name":"dstChainId_","type":"uint64","internalType":"uint64"},{"name":"message_","type":"bytes","internalType":"bytes"},{"name":"extraData_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"getMessageAMB","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint8[]","internalType":"uint8[]"}],"stateMutability":"view"},{"type":"function","name":"messageQuorum","inputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"payloadBody","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"payloadHeader","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"payloadTracking","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint8","internalType":"enum PayloadState"}],"stateMutability":"view"},{"type":"function","name":"payloadsCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"processPayload","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"receivePayload","inputs":[{"name":"srcChainId_","type":"uint64","internalType":"uint64"},{"name":"message_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"superRegistry","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ISuperRegistry"}],"stateMutability":"view"},{"type":"event","name":"PayloadProcessed","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PayloadReceived","inputs":[{"name":"srcChainId","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"dstChainId","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PayloadUpdated","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProofReceived","inputs":[{"name":"proof","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SuperRegistryUpdated","inputs":[{"name":"superRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"BLOCK_CHAIN_ID_OUT_OF_BOUNDS","inputs":[]},{"type":"error","name":"INSUFFICIENT_QUORUM","inputs":[]},{"type":"error","name":"INVALID_PROOF_BRIDGE_ID","inputs":[]},{"type":"error","name":"INVALID_PROOF_BRIDGE_IDS","inputs":[]},{"type":"error","name":"NOT_AMB_IMPLEMENTATION","inputs":[]},{"type":"error","name":"ZERO_AMB_ID_LENGTH","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"CHAIN_ID()":"85e1f4d0","dispatchPayload(address,uint8[],uint64,bytes,bytes)":"23de31e1","getMessageAMB(uint256)":"d830364e","messageQuorum(bytes32)":"d4961606","payloadBody(uint256)":"361ad42b","payloadHeader(uint256)":"36445ffd","payloadTracking(uint256)":"b63d36a5","payloadsCount()":"13c02a59","processPayload(uint256)":"5aef9480","receivePayload(uint64,bytes)":"cc2d8abd","superRegistry()":"24c73dda"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BLOCK_CHAIN_ID_OUT_OF_BOUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_QUORUM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_PROOF_BRIDGE_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_PROOF_BRIDGE_IDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_AMB_IMPLEMENTATION\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_AMB_ID_LENGTH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"}],\"name\":\"PayloadProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"}],\"name\":\"PayloadReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"}],\"name\":\"PayloadUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"ProofReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superRegistry\",\"type\":\"address\"}],\"name\":\"SuperRegistryUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcSender_\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"ambIds_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"dispatchPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"getMessageAMB\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"messageQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payloadBody\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payloadHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payloadTracking\",\"outputs\":[{\"internalType\":\"enum PayloadState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payloadsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"processPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"}],\"name\":\"receivePayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superRegistry\",\"outputs\":[{\"internalType\":\"contract ISuperRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeropoint Labs\",\"details\":\"Contract module that allows inheriting contracts to implement crosschain messaging & processing mechanisms.this is a lightweight version that allows only dispatching and receiving crosschainpayloads (messages). Inheriting children contracts have the flexibility to define their own processing mechanisms.\",\"errors\":{\"BLOCK_CHAIN_ID_OUT_OF_BOUNDS()\":[{\"details\":\"thrown if chain id exceeds max(uint64)\"}],\"INSUFFICIENT_QUORUM()\":[{\"details\":\"thrown if message failed to reach the specified level of quorum needed\"}],\"INVALID_PROOF_BRIDGE_ID()\":[{\"details\":\"thrown if message amb and proof amb are the same\"}],\"INVALID_PROOF_BRIDGE_IDS()\":[{\"details\":\"thrown if order of proof AMBs is incorrect, either duplicated or not incrementing\"}],\"NOT_AMB_IMPLEMENTATION()\":[{\"details\":\"thrown if msg.sender is not a valid amb implementation\"}],\"ZERO_AMB_ID_LENGTH()\":[{\"details\":\"thrown if amb ids length is 0\"}]},\"events\":{\"PayloadProcessed(uint256)\":{\"details\":\"is emitted when a payload id gets processed\"},\"PayloadReceived(uint64,uint64,uint256)\":{\"details\":\"is emitted when a cross-chain payload is received in the state registry\"},\"PayloadUpdated(uint256)\":{\"details\":\"is emitted when a payload id gets updated\"},\"ProofReceived(bytes32)\":{\"details\":\"is emitted when a cross-chain proof is received in the state registry NOTE: comes handy if quorum required is more than 0\"},\"SuperRegistryUpdated(address)\":{\"details\":\"is emitted when the super registry address is updated\"}},\"kind\":\"dev\",\"methods\":{\"dispatchPayload(address,uint8[],uint64,bytes,bytes)\":{\"details\":\"allows core contracts to send payload to a destination chain.\",\"params\":{\"ambIds_\":\"is the identifier of the arbitrary message bridge to be used\",\"dstChainId_\":\"is the internal chainId used throughout the protocol\",\"extraData_\":\"defines all the message bridge related overrides NOTE: dstChainId_ is mapped to message bridge's destination id inside it's implementation contract NOTE: ambIds_ are superform assigned unique identifier for arbitrary message bridges\",\"message_\":\"is the crosschain payload to be sent\",\"srcSender_\":\"is the caller of the function (used for gas refunds).\"}},\"getMessageAMB(uint256)\":{\"details\":\"allows users to read the ambs that delivered the payload id\",\"params\":{\"payloadId_\":\"is the unique payload identifier allocated on the destination chain\"},\"returns\":{\"_0\":\"is the identifier of ambs that delivered the message and proof\"}},\"processPayload(uint256)\":{\"details\":\"allows privileged actors to process cross-chain payloads\",\"params\":{\"payloadId_\":\"is the identifier of the cross-chain payload NOTE: Only {CORE_STATE_REGISTRY_PROCESSOR_ROLE} role can call this function NOTE: this should handle reverting the state on source chain in-case of failure (or) can implement scenario based reverting like in coreStateRegistry\"}},\"receivePayload(uint64,bytes)\":{\"details\":\"allows state registry to receive messages from message bridge implementations\",\"params\":{\"message_\":\"is the crosschain payload received NOTE: Only {IMPLEMENTATION_CONTRACT} role can call this function.\",\"srcChainId_\":\"is the superform chainId from which the payload is dispatched/sent\"}}},\"stateVariables\":{\"messageQuorum\":{\"details\":\"stores a proof's quorum\"},\"msgAMBs\":{\"details\":\"maps payloads to the amb ids that delivered them\"},\"payloadBody\":{\"details\":\"stores received payload after assigning them an unique identifier upon receiving\"},\"payloadHeader\":{\"details\":\"stores received payload's header (txInfo)\"},\"payloadTracking\":{\"details\":\"maps payloads to their current status\"},\"payloadsCount\":{\"details\":\"allows users to read the total payloads received by the registry\"}},\"title\":\"BaseStateRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/crosschain-data/BaseStateRegistry.sol\":\"BaseStateRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/crosschain-data/BaseStateRegistry.sol\":{\"keccak256\":\"0xa6aaa63d2613f858eb3b9ceb52736fea984103064484aab899d1880dac1a2cc7\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://7397d0dcfc44244f92c27681dd7674ff57523d41b17962b059ba575805b7559f\",\"dweb:/ipfs/QmfMpLXW6PiGTBzViGrKu6CFzDzCSHz1fs3zvNe7Rk7iVe\"]},\"src/interfaces/IAmbImplementation.sol\":{\"keccak256\":\"0xe81ba51a2d97899de6f586124feb3bcdac511aed5c070923abd415865c158b95\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://777dc535f054cba428cc138ac486416ecdaea73d65f2b35df9131777c8d20b9a\",\"dweb:/ipfs/QmNh7EQJWWpeSEAc1Xh3mMbgJqh5Abr1EMphWwEr3kJWtR\"]},\"src/interfaces/IBaseStateRegistry.sol\":{\"keccak256\":\"0x2518a094ab3a25fb7952b0c0d8403bb77efdce41b8eef8373b9f5e112ec628d5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://99c179828e54dd08e189db301c5570000d44700273159d77df78787634ea61a4\",\"dweb:/ipfs/QmSi8Qyn6YSqkxJoLvndmreucV1XqDTmv6Sp2jmmZPBQud\"]},\"src/interfaces/IQuorumManager.sol\":{\"keccak256\":\"0xe28b7d3aaf31fa96986f80f592cf1406169c8aea7c95255891a1ebaa57bab4e3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b397f8fc6e02b57edf218280a30f114ad936ef048175868be36006c1edb1443c\",\"dweb:/ipfs/QmfHgSRPmXncjVRpZSXEfhU8KQhyzTLNKnv1DscHMxmcdE\"]},\"src/interfaces/ISuperRegistry.sol\":{\"keccak256\":\"0xcadfa5f2af007eb37d084860fc8445df4d40b37e83dd019ea6d95838411f560f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3d888a2778f5b54c2092c6ca2eda1f72f593ed5824b8692851705a70d2820c5a\",\"dweb:/ipfs/QmPqDtU6QHqbTZ3ukJJvaTGQfzuT2BshLZf2cZ5Vt3G4Yg\"]},\"src/libraries/Error.sol\":{\"keccak256\":\"0x35e59a29713e7f0055d44a217e17d5ce730097e5dc21cf0e5695d81f1a823515\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1bd5c0b652e09f9f0d1685d3fd8fa66e3a5e91edf887d0c07dd0ab93a713b018\",\"dweb:/ipfs/QmQDwwVZSSHUrSn5etTMhHDgstpt4i2vebgX3SaXeGEw86\"]},\"src/libraries/ProofLib.sol\":{\"keccak256\":\"0xa8cf32fdbe5d30735b5cc9bbdc11e3bb8f6e3c418f20c06bb1eaf92db1fc0b56\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01dcda6160844c90cc6673d5e304f2603812bbf5304ffc2abc5803ff309479dd\",\"dweb:/ipfs/QmQFpSWTP6pgHHPi688oS7fcmE4J2DaTYaeSNjE4pYEG6Q\"]},\"src/types/DataTypes.sol\":{\"keccak256\":\"0x2fc00b90fe1d4daf00e283bdb9079cd257ba5154fcbb9c1c50181d214f23c12a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a33814dea4cdf5ee8aabe741d90897672fde7208cdd1561ffd7124f7ea98fde0\",\"dweb:/ipfs/QmSbGFzaPVZ5EqvNYPr2Q32P2itowoASEymTAiad3Eqcxz\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"BLOCK_CHAIN_ID_OUT_OF_BOUNDS"},{"inputs":[],"type":"error","name":"INSUFFICIENT_QUORUM"},{"inputs":[],"type":"error","name":"INVALID_PROOF_BRIDGE_ID"},{"inputs":[],"type":"error","name":"INVALID_PROOF_BRIDGE_IDS"},{"inputs":[],"type":"error","name":"NOT_AMB_IMPLEMENTATION"},{"inputs":[],"type":"error","name":"ZERO_AMB_ID_LENGTH"},{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true}],"type":"event","name":"PayloadProcessed","anonymous":false},{"inputs":[{"internalType":"uint64","name":"srcChainId","type":"uint64","indexed":true},{"internalType":"uint64","name":"dstChainId","type":"uint64","indexed":true},{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true}],"type":"event","name":"PayloadReceived","anonymous":false},{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true}],"type":"event","name":"PayloadUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"proof","type":"bytes32","indexed":true}],"type":"event","name":"ProofReceived","anonymous":false},{"inputs":[{"internalType":"address","name":"superRegistry","type":"address","indexed":true}],"type":"event","name":"SuperRegistryUpdated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"CHAIN_ID","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"address","name":"srcSender_","type":"address"},{"internalType":"uint8[]","name":"ambIds_","type":"uint8[]"},{"internalType":"uint64","name":"dstChainId_","type":"uint64"},{"internalType":"bytes","name":"message_","type":"bytes"},{"internalType":"bytes","name":"extraData_","type":"bytes"}],"stateMutability":"payable","type":"function","name":"dispatchPayload"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMessageAMB","outputs":[{"internalType":"uint8[]","name":"","type":"uint8[]"}]},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"messageQuorum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"payloadBody","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"payloadHeader","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"payloadTracking","outputs":[{"internalType":"enum PayloadState","name":"","type":"uint8"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"payloadsCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"payable","type":"function","name":"processPayload"},{"inputs":[{"internalType":"uint64","name":"srcChainId_","type":"uint64"},{"internalType":"bytes","name":"message_","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receivePayload"},{"inputs":[],"stateMutability":"view","type":"function","name":"superRegistry","outputs":[{"internalType":"contract ISuperRegistry","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"dispatchPayload(address,uint8[],uint64,bytes,bytes)":{"details":"allows core contracts to send payload to a destination chain.","params":{"ambIds_":"is the identifier of the arbitrary message bridge to be used","dstChainId_":"is the internal chainId used throughout the protocol","extraData_":"defines all the message bridge related overrides NOTE: dstChainId_ is mapped to message bridge's destination id inside it's implementation contract NOTE: ambIds_ are superform assigned unique identifier for arbitrary message bridges","message_":"is the crosschain payload to be sent","srcSender_":"is the caller of the function (used for gas refunds)."}},"getMessageAMB(uint256)":{"details":"allows users to read the ambs that delivered the payload id","params":{"payloadId_":"is the unique payload identifier allocated on the destination chain"},"returns":{"_0":"is the identifier of ambs that delivered the message and proof"}},"processPayload(uint256)":{"details":"allows privileged actors to process cross-chain payloads","params":{"payloadId_":"is the identifier of the cross-chain payload NOTE: Only {CORE_STATE_REGISTRY_PROCESSOR_ROLE} role can call this function NOTE: this should handle reverting the state on source chain in-case of failure (or) can implement scenario based reverting like in coreStateRegistry"}},"receivePayload(uint64,bytes)":{"details":"allows state registry to receive messages from message bridge implementations","params":{"message_":"is the crosschain payload received NOTE: Only {IMPLEMENTATION_CONTRACT} role can call this function.","srcChainId_":"is the superform chainId from which the payload is dispatched/sent"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/crosschain-data/BaseStateRegistry.sol":"BaseStateRegistry"},"evmVersion":"paris","libraries":{}},"sources":{"src/crosschain-data/BaseStateRegistry.sol":{"keccak256":"0xa6aaa63d2613f858eb3b9ceb52736fea984103064484aab899d1880dac1a2cc7","urls":["bzz-raw://7397d0dcfc44244f92c27681dd7674ff57523d41b17962b059ba575805b7559f","dweb:/ipfs/QmfMpLXW6PiGTBzViGrKu6CFzDzCSHz1fs3zvNe7Rk7iVe"],"license":"BUSL-1.1"},"src/interfaces/IAmbImplementation.sol":{"keccak256":"0xe81ba51a2d97899de6f586124feb3bcdac511aed5c070923abd415865c158b95","urls":["bzz-raw://777dc535f054cba428cc138ac486416ecdaea73d65f2b35df9131777c8d20b9a","dweb:/ipfs/QmNh7EQJWWpeSEAc1Xh3mMbgJqh5Abr1EMphWwEr3kJWtR"],"license":"BUSL-1.1"},"src/interfaces/IBaseStateRegistry.sol":{"keccak256":"0x2518a094ab3a25fb7952b0c0d8403bb77efdce41b8eef8373b9f5e112ec628d5","urls":["bzz-raw://99c179828e54dd08e189db301c5570000d44700273159d77df78787634ea61a4","dweb:/ipfs/QmSi8Qyn6YSqkxJoLvndmreucV1XqDTmv6Sp2jmmZPBQud"],"license":"BUSL-1.1"},"src/interfaces/IQuorumManager.sol":{"keccak256":"0xe28b7d3aaf31fa96986f80f592cf1406169c8aea7c95255891a1ebaa57bab4e3","urls":["bzz-raw://b397f8fc6e02b57edf218280a30f114ad936ef048175868be36006c1edb1443c","dweb:/ipfs/QmfHgSRPmXncjVRpZSXEfhU8KQhyzTLNKnv1DscHMxmcdE"],"license":"BUSL-1.1"},"src/interfaces/ISuperRegistry.sol":{"keccak256":"0xcadfa5f2af007eb37d084860fc8445df4d40b37e83dd019ea6d95838411f560f","urls":["bzz-raw://3d888a2778f5b54c2092c6ca2eda1f72f593ed5824b8692851705a70d2820c5a","dweb:/ipfs/QmPqDtU6QHqbTZ3ukJJvaTGQfzuT2BshLZf2cZ5Vt3G4Yg"],"license":"BUSL-1.1"},"src/libraries/Error.sol":{"keccak256":"0x35e59a29713e7f0055d44a217e17d5ce730097e5dc21cf0e5695d81f1a823515","urls":["bzz-raw://1bd5c0b652e09f9f0d1685d3fd8fa66e3a5e91edf887d0c07dd0ab93a713b018","dweb:/ipfs/QmQDwwVZSSHUrSn5etTMhHDgstpt4i2vebgX3SaXeGEw86"],"license":"BUSL-1.1"},"src/libraries/ProofLib.sol":{"keccak256":"0xa8cf32fdbe5d30735b5cc9bbdc11e3bb8f6e3c418f20c06bb1eaf92db1fc0b56","urls":["bzz-raw://01dcda6160844c90cc6673d5e304f2603812bbf5304ffc2abc5803ff309479dd","dweb:/ipfs/QmQFpSWTP6pgHHPi688oS7fcmE4J2DaTYaeSNjE4pYEG6Q"],"license":"BUSL-1.1"},"src/types/DataTypes.sol":{"keccak256":"0x2fc00b90fe1d4daf00e283bdb9079cd257ba5154fcbb9c1c50181d214f23c12a","urls":["bzz-raw://a33814dea4cdf5ee8aabe741d90897672fde7208cdd1561ffd7124f7ea98fde0","dweb:/ipfs/QmSbGFzaPVZ5EqvNYPr2Q32P2itowoASEymTAiad3Eqcxz"],"license":"BUSL-1.1"}},"version":1},"id":117}