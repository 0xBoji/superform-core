{"abi":[{"type":"function","name":"getRequiredMessagingQuorum","inputs":[{"name":"srcChainId_","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"quorum_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setRequiredMessagingQuorum","inputs":[{"name":"srcChainId_","type":"uint64","internalType":"uint64"},{"name":"quorum_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"QuorumSet","inputs":[{"name":"srcChainId","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"quorum","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getRequiredMessagingQuorum(uint64)":"1049a0db","setRequiredMessagingQuorum(uint64,uint256)":"040b14da"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"QuorumSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId_\",\"type\":\"uint64\"}],\"name\":\"getRequiredMessagingQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"quorum_\",\"type\":\"uint256\"}],\"name\":\"setRequiredMessagingQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ZeroPoint Labs\",\"details\":\"Interface for QuorumManager\",\"events\":{\"QuorumSet(uint64,uint256)\":{\"details\":\"emitted when a new quorum is set for a specific chain\",\"params\":{\"quorum\":\"the minimum number of message bridges required for processing\",\"srcChainId\":\"the chain id from which the message (payload) is sent\"}}},\"kind\":\"dev\",\"methods\":{\"getRequiredMessagingQuorum(uint64)\":{\"details\":\"returns the required quorum for the srcChain & dstChain\",\"params\":{\"srcChainId_\":\"is the chain id from which the message (payload) is sent\"},\"returns\":{\"quorum_\":\"the minimum number of message bridges required for processing\"}},\"setRequiredMessagingQuorum(uint64,uint256)\":{\"details\":\"allows inheriting contracts to set the messaging quorum for a specific sender chain\",\"params\":{\"quorum_\":\"the minimum number of message bridges required for processing NOTE: overriding child contracts should handle the sender validation & setting of message quorum\",\"srcChainId_\":\"is the chain id from which the message (payload) is sent\"}}},\"title\":\"IQuorumManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRequiredMessagingQuorum(uint64,uint256)\":{\"notice\":\"quorum is the number of extra ambs a message proof must go through and be validated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IQuorumManager.sol\":\"IQuorumManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/interfaces/IQuorumManager.sol\":{\"keccak256\":\"0xe28b7d3aaf31fa96986f80f592cf1406169c8aea7c95255891a1ebaa57bab4e3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b397f8fc6e02b57edf218280a30f114ad936ef048175868be36006c1edb1443c\",\"dweb:/ipfs/QmfHgSRPmXncjVRpZSXEfhU8KQhyzTLNKnv1DscHMxmcdE\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint64","name":"srcChainId","type":"uint64","indexed":true},{"internalType":"uint256","name":"quorum","type":"uint256","indexed":true}],"type":"event","name":"QuorumSet","anonymous":false},{"inputs":[{"internalType":"uint64","name":"srcChainId_","type":"uint64"}],"stateMutability":"view","type":"function","name":"getRequiredMessagingQuorum","outputs":[{"internalType":"uint256","name":"quorum_","type":"uint256"}]},{"inputs":[{"internalType":"uint64","name":"srcChainId_","type":"uint64"},{"internalType":"uint256","name":"quorum_","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setRequiredMessagingQuorum"}],"devdoc":{"kind":"dev","methods":{"getRequiredMessagingQuorum(uint64)":{"details":"returns the required quorum for the srcChain & dstChain","params":{"srcChainId_":"is the chain id from which the message (payload) is sent"},"returns":{"quorum_":"the minimum number of message bridges required for processing"}},"setRequiredMessagingQuorum(uint64,uint256)":{"details":"allows inheriting contracts to set the messaging quorum for a specific sender chain","params":{"quorum_":"the minimum number of message bridges required for processing NOTE: overriding child contracts should handle the sender validation & setting of message quorum","srcChainId_":"is the chain id from which the message (payload) is sent"}}},"version":1},"userdoc":{"kind":"user","methods":{"setRequiredMessagingQuorum(uint64,uint256)":{"notice":"quorum is the number of extra ambs a message proof must go through and be validated"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IQuorumManager.sol":"IQuorumManager"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IQuorumManager.sol":{"keccak256":"0xe28b7d3aaf31fa96986f80f592cf1406169c8aea7c95255891a1ebaa57bab4e3","urls":["bzz-raw://b397f8fc6e02b57edf218280a30f114ad936ef048175868be36006c1edb1443c","dweb:/ipfs/QmfHgSRPmXncjVRpZSXEfhU8KQhyzTLNKnv1DscHMxmcdE"],"license":"BUSL-1.1"}},"version":1},"id":156}