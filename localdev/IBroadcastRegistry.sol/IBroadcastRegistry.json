{"abi":[{"type":"function","name":"broadcastPayload","inputs":[{"name":"srcSender_","type":"address","internalType":"address"},{"name":"ambId_","type":"uint8","internalType":"uint8"},{"name":"gasFee_","type":"uint256","internalType":"uint256"},{"name":"message_","type":"bytes","internalType":"bytes"},{"name":"extraData_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"processPayload","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"receiveBroadcastPayload","inputs":[{"name":"srcChainId_","type":"uint64","internalType":"uint64"},{"name":"message_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"PayloadReceived","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"srcChainId","type":"uint64","indexed":true,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"PayloadSent","inputs":[{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"broadcastPayload(address,uint8,uint256,bytes,bytes)":"c63304f6","processPayload(uint256)":"5aef9480","receiveBroadcastPayload(uint64,bytes)":"0b0d73a0"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"}],\"name\":\"PayloadReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PayloadSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcSender_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"ambId_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"gasFee_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"broadcastPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"processPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"}],\"name\":\"receiveBroadcastPayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ZeroPoint Labs\",\"details\":\"Interface for BroadcastRegistry\",\"events\":{\"PayloadReceived(uint256,uint64)\":{\"details\":\"emitted when a broadcast payload is received\"},\"PayloadSent(address)\":{\"details\":\"emitted when a payload is broadcasted\"}},\"kind\":\"dev\",\"methods\":{\"broadcastPayload(address,uint8,uint256,bytes,bytes)\":{\"details\":\"allows core contracts to send payload to all configured destination chain.\",\"params\":{\"ambId_\":\"is the identifier of the arbitrary message bridge to be used\",\"extraData_\":\"defines all the message bridge related overrides\",\"gasFee_\":\"is the gas fee to be used for broadcasting\",\"message_\":\"is the crosschain payload to be broadcasted\",\"srcSender_\":\"is the caller of the function (used for gas refunds).\"}},\"processPayload(uint256)\":{\"details\":\"allows privileged actors to process broadcasted payloads\",\"params\":{\"payloadId_\":\"is the identifier of the cross-chain payload\"}},\"receiveBroadcastPayload(uint64,bytes)\":{\"details\":\"allows ambs to write broadcasted payloads\"}},\"title\":\"IBroadcastRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IBroadcastRegistry.sol\":\"IBroadcastRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/interfaces/IBroadcastRegistry.sol\":{\"keccak256\":\"0x294bd4c8de81a15b2a78e1a1f681a31cbd19a0a17d3afeced693eb38e3a424d4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://8d1e30b1aaabb8adde2d81b5b8016535981c70001795a42bcd59d3d72bf0ee76\",\"dweb:/ipfs/QmRrc5PYLXykFTjaSZqaTd1iYRrCKz24YArrbf8BMZZXGR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true},{"internalType":"uint64","name":"srcChainId","type":"uint64","indexed":true}],"type":"event","name":"PayloadReceived","anonymous":false},{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":true}],"type":"event","name":"PayloadSent","anonymous":false},{"inputs":[{"internalType":"address","name":"srcSender_","type":"address"},{"internalType":"uint8","name":"ambId_","type":"uint8"},{"internalType":"uint256","name":"gasFee_","type":"uint256"},{"internalType":"bytes","name":"message_","type":"bytes"},{"internalType":"bytes","name":"extraData_","type":"bytes"}],"stateMutability":"payable","type":"function","name":"broadcastPayload"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"processPayload"},{"inputs":[{"internalType":"uint64","name":"srcChainId_","type":"uint64"},{"internalType":"bytes","name":"message_","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receiveBroadcastPayload"}],"devdoc":{"kind":"dev","methods":{"broadcastPayload(address,uint8,uint256,bytes,bytes)":{"details":"allows core contracts to send payload to all configured destination chain.","params":{"ambId_":"is the identifier of the arbitrary message bridge to be used","extraData_":"defines all the message bridge related overrides","gasFee_":"is the gas fee to be used for broadcasting","message_":"is the crosschain payload to be broadcasted","srcSender_":"is the caller of the function (used for gas refunds)."}},"processPayload(uint256)":{"details":"allows privileged actors to process broadcasted payloads","params":{"payloadId_":"is the identifier of the cross-chain payload"}},"receiveBroadcastPayload(uint64,bytes)":{"details":"allows ambs to write broadcasted payloads"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IBroadcastRegistry.sol":"IBroadcastRegistry"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IBroadcastRegistry.sol":{"keccak256":"0x294bd4c8de81a15b2a78e1a1f681a31cbd19a0a17d3afeced693eb38e3a424d4","urls":["bzz-raw://8d1e30b1aaabb8adde2d81b5b8016535981c70001795a42bcd59d3d72bf0ee76","dweb:/ipfs/QmRrc5PYLXykFTjaSZqaTd1iYRrCKz24YArrbf8BMZZXGR"],"license":"BUSL-1.1"}},"version":1},"id":148}