{"abi":[{"type":"function","name":"dispatchPayload","inputs":[{"name":"srcSender_","type":"address","internalType":"address"},{"name":"ambIds_","type":"uint8[]","internalType":"uint8[]"},{"name":"dstChainId_","type":"uint64","internalType":"uint64"},{"name":"message_","type":"bytes","internalType":"bytes"},{"name":"extraData_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"getMessageAMB","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"ambIds_","type":"uint8[]","internalType":"uint8[]"}],"stateMutability":"view"},{"type":"function","name":"payloadBody","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"payloadBody_","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"payloadHeader","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"payloadHeader_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"payloadTracking","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"payloadState_","type":"uint8","internalType":"enum PayloadState"}],"stateMutability":"view"},{"type":"function","name":"payloadsCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"processPayload","inputs":[{"name":"payloadId_","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"receivePayload","inputs":[{"name":"srcChainId_","type":"uint64","internalType":"uint64"},{"name":"message_","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"PayloadProcessed","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PayloadReceived","inputs":[{"name":"srcChainId","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"dstChainId","type":"uint64","indexed":true,"internalType":"uint64"},{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"PayloadUpdated","inputs":[{"name":"payloadId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProofReceived","inputs":[{"name":"proof","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SuperRegistryUpdated","inputs":[{"name":"superRegistry","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"dispatchPayload(address,uint8[],uint64,bytes,bytes)":"23de31e1","getMessageAMB(uint256)":"d830364e","payloadBody(uint256)":"361ad42b","payloadHeader(uint256)":"36445ffd","payloadTracking(uint256)":"b63d36a5","payloadsCount()":"13c02a59","processPayload(uint256)":"5aef9480","receivePayload(uint64,bytes)":"cc2d8abd"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"}],\"name\":\"PayloadProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"}],\"name\":\"PayloadReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"payloadId\",\"type\":\"uint256\"}],\"name\":\"PayloadUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proof\",\"type\":\"bytes32\"}],\"name\":\"ProofReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superRegistry\",\"type\":\"address\"}],\"name\":\"SuperRegistryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcSender_\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"ambIds_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"dispatchPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"getMessageAMB\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"ambIds_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"payloadBody\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"payloadBody_\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"payloadHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadHeader_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"payloadTracking\",\"outputs\":[{\"internalType\":\"enum PayloadState\",\"name\":\"payloadState_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payloadsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payloadId_\",\"type\":\"uint256\"}],\"name\":\"processPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"}],\"name\":\"receivePayload\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"interface to read public variable from state registry\",\"events\":{\"PayloadProcessed(uint256)\":{\"details\":\"is emitted when a payload id gets processed\"},\"PayloadReceived(uint64,uint64,uint256)\":{\"details\":\"is emitted when a cross-chain payload is received in the state registry\"},\"PayloadUpdated(uint256)\":{\"details\":\"is emitted when a payload id gets updated\"},\"ProofReceived(bytes32)\":{\"details\":\"is emitted when a cross-chain proof is received in the state registry NOTE: comes handy if quorum required is more than 0\"},\"SuperRegistryUpdated(address)\":{\"details\":\"is emitted when the super registry address is updated\"}},\"kind\":\"dev\",\"methods\":{\"dispatchPayload(address,uint8[],uint64,bytes,bytes)\":{\"details\":\"allows core contracts to send payload to a destination chain.\",\"params\":{\"ambIds_\":\"is the identifier of the arbitrary message bridge to be used\",\"dstChainId_\":\"is the internal chainId used throughout the protocol\",\"extraData_\":\"defines all the message bridge related overrides NOTE: dstChainId_ is mapped to message bridge's destination id inside it's implementation contract NOTE: ambIds_ are superform assigned unique identifier for arbitrary message bridges\",\"message_\":\"is the crosschain payload to be sent\",\"srcSender_\":\"is the caller of the function (used for gas refunds).\"}},\"getMessageAMB(uint256)\":{\"details\":\"allows users to read the ambs that delivered the payload id\",\"params\":{\"payloadId_\":\"is the unique payload identifier allocated on the destination chain\"},\"returns\":{\"ambIds_\":\"is the identifier of ambs that delivered the message and proof\"}},\"payloadBody(uint256)\":{\"details\":\"allows users to read the bytes payload_ stored per payloadId_\",\"params\":{\"payloadId_\":\"is the unique payload identifier allocated on the destination chain\"},\"returns\":{\"payloadBody_\":\"the crosschain data received\"}},\"payloadHeader(uint256)\":{\"details\":\"allows users to read the uint256 payloadHeader stored per payloadId_\",\"params\":{\"payloadId_\":\"is the unique payload identifier allocated on the destination chain\"},\"returns\":{\"payloadHeader_\":\"the crosschain header received\"}},\"payloadTracking(uint256)\":{\"details\":\"allows user to read the payload state uint256 payloadId_ is the unique payload identifier allocated on the destination chain\"},\"payloadsCount()\":{\"details\":\"allows users to read the total payloads received by the registry\"},\"processPayload(uint256)\":{\"details\":\"allows privileged actors to process cross-chain payloads\",\"params\":{\"payloadId_\":\"is the identifier of the cross-chain payload NOTE: Only {CORE_STATE_REGISTRY_PROCESSOR_ROLE} role can call this function NOTE: this should handle reverting the state on source chain in-case of failure (or) can implement scenario based reverting like in coreStateRegistry\"}},\"receivePayload(uint64,bytes)\":{\"details\":\"allows state registry to receive messages from message bridge implementations\",\"params\":{\"message_\":\"is the crosschain payload received NOTE: Only {IMPLEMENTATION_CONTRACT} role can call this function.\",\"srcChainId_\":\"is the superform chainId from which the payload is dispatched/sent\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/payments/PaymentHelper.sol\":\"ReadOnlyBaseRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"lib/ERC1155A/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0x65ca47513b279410048d29579aa4b32d8a7faf4ee8264f22ae4ac51117e733d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c9a84d41cb877bf31c3db9a3dd917d5d94509834604722e7b972b112e4af705f\",\"dweb:/ipfs/QmYEZBWxWDkdbqqDTUmDpCD7txYMuS2ykcrCH3D5HAJ1J1\"]},\"src/interfaces/IAmbImplementation.sol\":{\"keccak256\":\"0xe81ba51a2d97899de6f586124feb3bcdac511aed5c070923abd415865c158b95\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://777dc535f054cba428cc138ac486416ecdaea73d65f2b35df9131777c8d20b9a\",\"dweb:/ipfs/QmNh7EQJWWpeSEAc1Xh3mMbgJqh5Abr1EMphWwEr3kJWtR\"]},\"src/interfaces/IBaseStateRegistry.sol\":{\"keccak256\":\"0x2518a094ab3a25fb7952b0c0d8403bb77efdce41b8eef8373b9f5e112ec628d5\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://99c179828e54dd08e189db301c5570000d44700273159d77df78787634ea61a4\",\"dweb:/ipfs/QmSi8Qyn6YSqkxJoLvndmreucV1XqDTmv6Sp2jmmZPBQud\"]},\"src/interfaces/IPaymentHelper.sol\":{\"keccak256\":\"0x136b2f585fa16921700e26fc8c913efd6627db3ad94f150c90722139c59dd7aa\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d7a306e7c00070a54d93a1186d6127bd56cbbd75569394c3f0ab764bea810559\",\"dweb:/ipfs/QmW65BapVGchof6hmWJnGZfcyYDBoXGXnwgUrakBjDDBXG\"]},\"src/interfaces/ISuperRBAC.sol\":{\"keccak256\":\"0xa3de3e10a03389961616f5b99d705567d14a76a29d03f8dc5d7bf78852e69e10\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a5041188a8657f4b7b64605808c9ae7b6bbc4b2c345904e7738463d1b0db5726\",\"dweb:/ipfs/QmcDNk5BHzxvGdtH89h96RT4JMKmbzjMQ5UjXQov7t65qX\"]},\"src/interfaces/ISuperRegistry.sol\":{\"keccak256\":\"0xcadfa5f2af007eb37d084860fc8445df4d40b37e83dd019ea6d95838411f560f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3d888a2778f5b54c2092c6ca2eda1f72f593ed5824b8692851705a70d2820c5a\",\"dweb:/ipfs/QmPqDtU6QHqbTZ3ukJJvaTGQfzuT2BshLZf2cZ5Vt3G4Yg\"]},\"src/interfaces/ISuperformFactory.sol\":{\"keccak256\":\"0xf5388b79d873416732a56ed180cef87ec9afb24760cedd836c5c32a9460ca3fe\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://22c18ffab4c4ab8f92d214c09c157725df6bf914b6d0ecdead6eec0b7c553770\",\"dweb:/ipfs/Qmdiths3954ysdZ3Yb3aAjbXd1CRkjWczXzP4yU3VnnP52\"]},\"src/libraries/ArrayCastLib.sol\":{\"keccak256\":\"0x482c60aeb161a3b702ba90ac55b7c1da366b6f72ef050f2d75ac00328d26610a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c6d57bf59742d493b1e50a87ac687fa963331c28f7c31c60d5d0f052a989ab0d\",\"dweb:/ipfs/QmZLFXm3ymnGyS6XGMypZfphMeRSs3BpfFwrAemGk9oRXZ\"]},\"src/libraries/DataLib.sol\":{\"keccak256\":\"0x588e127f6bf4c0fffe3c1288ddbbdc9e1192062d539b17bd69fe062795404228\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://9b4e8347d99e5ffada731ba3baba7fa13c27fd81cb31d48df3d19ca9ba33785b\",\"dweb:/ipfs/Qmbj78n7ed4B7SCkae8tje1YMwkExncYrNNTzVR9sgW2dU\"]},\"src/libraries/Error.sol\":{\"keccak256\":\"0x35e59a29713e7f0055d44a217e17d5ce730097e5dc21cf0e5695d81f1a823515\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1bd5c0b652e09f9f0d1685d3fd8fa66e3a5e91edf887d0c07dd0ab93a713b018\",\"dweb:/ipfs/QmQDwwVZSSHUrSn5etTMhHDgstpt4i2vebgX3SaXeGEw86\"]},\"src/libraries/ProofLib.sol\":{\"keccak256\":\"0xa8cf32fdbe5d30735b5cc9bbdc11e3bb8f6e3c418f20c06bb1eaf92db1fc0b56\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01dcda6160844c90cc6673d5e304f2603812bbf5304ffc2abc5803ff309479dd\",\"dweb:/ipfs/QmQFpSWTP6pgHHPi688oS7fcmE4J2DaTYaeSNjE4pYEG6Q\"]},\"src/payments/PaymentHelper.sol\":{\"keccak256\":\"0xa56e91040d2a3dafebc436ce6882989e69b3c20751fa362b21ae649bf96d6022\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://9892954acafe1b9ea70d43693e09e0d4e0c9617403cf260411691aceda0c79b2\",\"dweb:/ipfs/QmUWGWMhtBpkYB16uEB6ieeUvrP6Bitsu8BMyEwspFisUG\"]},\"src/types/DataTypes.sol\":{\"keccak256\":\"0x2fc00b90fe1d4daf00e283bdb9079cd257ba5154fcbb9c1c50181d214f23c12a\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a33814dea4cdf5ee8aabe741d90897672fde7208cdd1561ffd7124f7ea98fde0\",\"dweb:/ipfs/QmSbGFzaPVZ5EqvNYPr2Q32P2itowoASEymTAiad3Eqcxz\"]},\"src/vendor/chainlink/AggregatorV3Interface.sol\":{\"keccak256\":\"0xece070c6cb81404d46ebd47ec6d3937fdc6a355847fe2aaaeb8ad0405b66bb40\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3052fc2d76a9e1f3d47f1d7d87c9c23c8c2d2886e9be3b17b45523a208423008\",\"dweb:/ipfs/Qmf97rypuqoVGXdY2nFx2MynMx1b5PvweGrczcF4SKS6Mn\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true}],"type":"event","name":"PayloadProcessed","anonymous":false},{"inputs":[{"internalType":"uint64","name":"srcChainId","type":"uint64","indexed":true},{"internalType":"uint64","name":"dstChainId","type":"uint64","indexed":true},{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true}],"type":"event","name":"PayloadReceived","anonymous":false},{"inputs":[{"internalType":"uint256","name":"payloadId","type":"uint256","indexed":true}],"type":"event","name":"PayloadUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"proof","type":"bytes32","indexed":true}],"type":"event","name":"ProofReceived","anonymous":false},{"inputs":[{"internalType":"address","name":"superRegistry","type":"address","indexed":true}],"type":"event","name":"SuperRegistryUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"srcSender_","type":"address"},{"internalType":"uint8[]","name":"ambIds_","type":"uint8[]"},{"internalType":"uint64","name":"dstChainId_","type":"uint64"},{"internalType":"bytes","name":"message_","type":"bytes"},{"internalType":"bytes","name":"extraData_","type":"bytes"}],"stateMutability":"payable","type":"function","name":"dispatchPayload"},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMessageAMB","outputs":[{"internalType":"uint8[]","name":"ambIds_","type":"uint8[]"}]},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"view","type":"function","name":"payloadBody","outputs":[{"internalType":"bytes","name":"payloadBody_","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"view","type":"function","name":"payloadHeader","outputs":[{"internalType":"uint256","name":"payloadHeader_","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"view","type":"function","name":"payloadTracking","outputs":[{"internalType":"enum PayloadState","name":"payloadState_","type":"uint8"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"payloadsCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"payloadId_","type":"uint256"}],"stateMutability":"payable","type":"function","name":"processPayload"},{"inputs":[{"internalType":"uint64","name":"srcChainId_","type":"uint64"},{"internalType":"bytes","name":"message_","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receivePayload"}],"devdoc":{"kind":"dev","methods":{"dispatchPayload(address,uint8[],uint64,bytes,bytes)":{"details":"allows core contracts to send payload to a destination chain.","params":{"ambIds_":"is the identifier of the arbitrary message bridge to be used","dstChainId_":"is the internal chainId used throughout the protocol","extraData_":"defines all the message bridge related overrides NOTE: dstChainId_ is mapped to message bridge's destination id inside it's implementation contract NOTE: ambIds_ are superform assigned unique identifier for arbitrary message bridges","message_":"is the crosschain payload to be sent","srcSender_":"is the caller of the function (used for gas refunds)."}},"getMessageAMB(uint256)":{"details":"allows users to read the ambs that delivered the payload id","params":{"payloadId_":"is the unique payload identifier allocated on the destination chain"},"returns":{"ambIds_":"is the identifier of ambs that delivered the message and proof"}},"payloadBody(uint256)":{"details":"allows users to read the bytes payload_ stored per payloadId_","params":{"payloadId_":"is the unique payload identifier allocated on the destination chain"},"returns":{"payloadBody_":"the crosschain data received"}},"payloadHeader(uint256)":{"details":"allows users to read the uint256 payloadHeader stored per payloadId_","params":{"payloadId_":"is the unique payload identifier allocated on the destination chain"},"returns":{"payloadHeader_":"the crosschain header received"}},"payloadTracking(uint256)":{"details":"allows user to read the payload state uint256 payloadId_ is the unique payload identifier allocated on the destination chain"},"payloadsCount()":{"details":"allows users to read the total payloads received by the registry"},"processPayload(uint256)":{"details":"allows privileged actors to process cross-chain payloads","params":{"payloadId_":"is the identifier of the cross-chain payload NOTE: Only {CORE_STATE_REGISTRY_PROCESSOR_ROLE} role can call this function NOTE: this should handle reverting the state on source chain in-case of failure (or) can implement scenario based reverting like in coreStateRegistry"}},"receivePayload(uint64,bytes)":{"details":"allows state registry to receive messages from message bridge implementations","params":{"message_":"is the crosschain payload received NOTE: Only {IMPLEMENTATION_CONTRACT} role can call this function.","srcChainId_":"is the superform chainId from which the payload is dispatched/sent"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/payments/PaymentHelper.sol":"ReadOnlyBaseRegistry"},"evmVersion":"paris","libraries":{}},"sources":{"lib/ERC1155A/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"keccak256":"0x65ca47513b279410048d29579aa4b32d8a7faf4ee8264f22ae4ac51117e733d9","urls":["bzz-raw://c9a84d41cb877bf31c3db9a3dd917d5d94509834604722e7b972b112e4af705f","dweb:/ipfs/QmYEZBWxWDkdbqqDTUmDpCD7txYMuS2ykcrCH3D5HAJ1J1"],"license":"MIT"},"src/interfaces/IAmbImplementation.sol":{"keccak256":"0xe81ba51a2d97899de6f586124feb3bcdac511aed5c070923abd415865c158b95","urls":["bzz-raw://777dc535f054cba428cc138ac486416ecdaea73d65f2b35df9131777c8d20b9a","dweb:/ipfs/QmNh7EQJWWpeSEAc1Xh3mMbgJqh5Abr1EMphWwEr3kJWtR"],"license":"BUSL-1.1"},"src/interfaces/IBaseStateRegistry.sol":{"keccak256":"0x2518a094ab3a25fb7952b0c0d8403bb77efdce41b8eef8373b9f5e112ec628d5","urls":["bzz-raw://99c179828e54dd08e189db301c5570000d44700273159d77df78787634ea61a4","dweb:/ipfs/QmSi8Qyn6YSqkxJoLvndmreucV1XqDTmv6Sp2jmmZPBQud"],"license":"BUSL-1.1"},"src/interfaces/IPaymentHelper.sol":{"keccak256":"0x136b2f585fa16921700e26fc8c913efd6627db3ad94f150c90722139c59dd7aa","urls":["bzz-raw://d7a306e7c00070a54d93a1186d6127bd56cbbd75569394c3f0ab764bea810559","dweb:/ipfs/QmW65BapVGchof6hmWJnGZfcyYDBoXGXnwgUrakBjDDBXG"],"license":"BUSL-1.1"},"src/interfaces/ISuperRBAC.sol":{"keccak256":"0xa3de3e10a03389961616f5b99d705567d14a76a29d03f8dc5d7bf78852e69e10","urls":["bzz-raw://a5041188a8657f4b7b64605808c9ae7b6bbc4b2c345904e7738463d1b0db5726","dweb:/ipfs/QmcDNk5BHzxvGdtH89h96RT4JMKmbzjMQ5UjXQov7t65qX"],"license":"BUSL-1.1"},"src/interfaces/ISuperRegistry.sol":{"keccak256":"0xcadfa5f2af007eb37d084860fc8445df4d40b37e83dd019ea6d95838411f560f","urls":["bzz-raw://3d888a2778f5b54c2092c6ca2eda1f72f593ed5824b8692851705a70d2820c5a","dweb:/ipfs/QmPqDtU6QHqbTZ3ukJJvaTGQfzuT2BshLZf2cZ5Vt3G4Yg"],"license":"BUSL-1.1"},"src/interfaces/ISuperformFactory.sol":{"keccak256":"0xf5388b79d873416732a56ed180cef87ec9afb24760cedd836c5c32a9460ca3fe","urls":["bzz-raw://22c18ffab4c4ab8f92d214c09c157725df6bf914b6d0ecdead6eec0b7c553770","dweb:/ipfs/Qmdiths3954ysdZ3Yb3aAjbXd1CRkjWczXzP4yU3VnnP52"],"license":"BUSL-1.1"},"src/libraries/ArrayCastLib.sol":{"keccak256":"0x482c60aeb161a3b702ba90ac55b7c1da366b6f72ef050f2d75ac00328d26610a","urls":["bzz-raw://c6d57bf59742d493b1e50a87ac687fa963331c28f7c31c60d5d0f052a989ab0d","dweb:/ipfs/QmZLFXm3ymnGyS6XGMypZfphMeRSs3BpfFwrAemGk9oRXZ"],"license":"BUSL-1.1"},"src/libraries/DataLib.sol":{"keccak256":"0x588e127f6bf4c0fffe3c1288ddbbdc9e1192062d539b17bd69fe062795404228","urls":["bzz-raw://9b4e8347d99e5ffada731ba3baba7fa13c27fd81cb31d48df3d19ca9ba33785b","dweb:/ipfs/Qmbj78n7ed4B7SCkae8tje1YMwkExncYrNNTzVR9sgW2dU"],"license":"BUSL-1.1"},"src/libraries/Error.sol":{"keccak256":"0x35e59a29713e7f0055d44a217e17d5ce730097e5dc21cf0e5695d81f1a823515","urls":["bzz-raw://1bd5c0b652e09f9f0d1685d3fd8fa66e3a5e91edf887d0c07dd0ab93a713b018","dweb:/ipfs/QmQDwwVZSSHUrSn5etTMhHDgstpt4i2vebgX3SaXeGEw86"],"license":"BUSL-1.1"},"src/libraries/ProofLib.sol":{"keccak256":"0xa8cf32fdbe5d30735b5cc9bbdc11e3bb8f6e3c418f20c06bb1eaf92db1fc0b56","urls":["bzz-raw://01dcda6160844c90cc6673d5e304f2603812bbf5304ffc2abc5803ff309479dd","dweb:/ipfs/QmQFpSWTP6pgHHPi688oS7fcmE4J2DaTYaeSNjE4pYEG6Q"],"license":"BUSL-1.1"},"src/payments/PaymentHelper.sol":{"keccak256":"0xa56e91040d2a3dafebc436ce6882989e69b3c20751fa362b21ae649bf96d6022","urls":["bzz-raw://9892954acafe1b9ea70d43693e09e0d4e0c9617403cf260411691aceda0c79b2","dweb:/ipfs/QmUWGWMhtBpkYB16uEB6ieeUvrP6Bitsu8BMyEwspFisUG"],"license":"BUSL-1.1"},"src/types/DataTypes.sol":{"keccak256":"0x2fc00b90fe1d4daf00e283bdb9079cd257ba5154fcbb9c1c50181d214f23c12a","urls":["bzz-raw://a33814dea4cdf5ee8aabe741d90897672fde7208cdd1561ffd7124f7ea98fde0","dweb:/ipfs/QmSbGFzaPVZ5EqvNYPr2Q32P2itowoASEymTAiad3Eqcxz"],"license":"BUSL-1.1"},"src/vendor/chainlink/AggregatorV3Interface.sol":{"keccak256":"0xece070c6cb81404d46ebd47ec6d3937fdc6a355847fe2aaaeb8ad0405b66bb40","urls":["bzz-raw://3052fc2d76a9e1f3d47f1d7d87c9c23c8c2d2886e9be3b17b45523a208423008","dweb:/ipfs/Qmf97rypuqoVGXdY2nFx2MynMx1b5PvweGrczcF4SKS6Mn"],"license":"MIT"}},"version":1},"id":171}