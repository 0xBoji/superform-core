{"abi":[{"type":"function","name":"batchClaim","inputs":[{"name":"receiver_","type":"address","internalType":"address"},{"name":"periodIds_","type":"uint256[]","internalType":"uint256[]"},{"name":"rewardTokens_","type":"address[][]","internalType":"address[][]"},{"name":"amountsClaimed_","type":"uint256[][]","internalType":"uint256[][]"},{"name":"proofs_","type":"bytes32[][]","internalType":"bytes32[][]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"claim","inputs":[{"name":"receiver_","type":"address","internalType":"address"},{"name":"periodId_","type":"uint256","internalType":"uint256"},{"name":"rewardTokens_","type":"address[]","internalType":"address[]"},{"name":"amountsClaimed_","type":"uint256[]","internalType":"uint256[]"},{"name":"proof_","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPeriodicRewards","inputs":[{"name":"root_","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"verifyClaim","inputs":[{"name":"claimer_","type":"address","internalType":"address"},{"name":"periodId_","type":"uint256","internalType":"uint256"},{"name":"rewardTokens_","type":"address[]","internalType":"address[]"},{"name":"amountsClaimed_","type":"uint256[]","internalType":"uint256[]"},{"name":"proof_","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"valid","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"PeriodicRewardsSet","inputs":[{"name":"periodId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"merkleRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RewardsClaimed","inputs":[{"name":"claimer","type":"address","indexed":true,"internalType":"address"},{"name":"receiver","type":"address","indexed":true,"internalType":"address"},{"name":"periodId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"rewardTokens_","type":"address[]","indexed":false,"internalType":"address[]"},{"name":"amountsClaimed_","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"error","name":"INVALID_BATCH_REQ","inputs":[]},{"type":"error","name":"INVALID_CLAIM","inputs":[]},{"type":"error","name":"INVALID_MERKLE_ROOT","inputs":[]},{"type":"error","name":"INVALID_RECEIVER","inputs":[]},{"type":"error","name":"MERKLE_ROOT_NOT_SET","inputs":[]},{"type":"error","name":"NOT_REWARDS_ADMIN","inputs":[]},{"type":"error","name":"ZERO_ARR_LENGTH","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchClaim(address,uint256[],address[][],uint256[][],bytes32[][])":"47575953","claim(address,uint256,address[],uint256[],bytes32[])":"2ad75037","setPeriodicRewards(bytes32)":"2462cbfb","verifyClaim(address,uint256,address[],uint256[],bytes32[])":"b6e5ef18"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"INVALID_BATCH_REQ\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_CLAIM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_MERKLE_ROOT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_RECEIVER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT_NOT_SET\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_REWARDS_ADMIN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ARR_LENGTH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"PeriodicRewardsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsClaimed_\",\"type\":\"uint256[]\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"periodIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"rewardTokens_\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amountsClaimed_\",\"type\":\"uint256[][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"proofs_\",\"type\":\"bytes32[][]\"}],\"name\":\"batchClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodId_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsClaimed_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"}],\"name\":\"setPeriodicRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodId_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsClaimed_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"verifyClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zeropoint Labs\",\"events\":{\"PeriodicRewardsSet(uint256,bytes32)\":{\"details\":\"Emitted when new periodic rewards are set.\"},\"RewardsClaimed(address,address,uint256,address[],uint256[])\":{\"details\":\"Emitted when tokens are claimed.\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,address[],uint256[],bytes32[])\":{\"params\":{\"amountsClaimed_\":\"adre the amount of tokens to claim for each reward token\",\"periodId_\":\"is the specific period to claim\",\"proof_\":\"the merkle proof\",\"receiver_\":\"is the receiver of the tokens to claim.\",\"rewardTokens_\":\"are the address of the rewards token to claim on the specific period\"}},\"setPeriodicRewards(bytes32)\":{\"details\":\"[gas-opt]: function is payable to avoid msg.value checks\",\"params\":{\"root_\":\"is the merkle root for that period generated offchain\"}},\"verifyClaim(address,uint256,address[],uint256[],bytes32[])\":{\"details\":\"returns false even if proof is valid and user already claimed their periodic rewards\",\"params\":{\"amountsClaimed_\":\"adre the amount of tokens to claim for each reward token\",\"claimer_\":\"is the address of the claiming wallet\",\"periodId_\":\"is the period identifier\",\"proof_\":\"is the merkle proof\",\"rewardTokens_\":\"are the address of the rewards token to claim on the specific period\"}}},\"title\":\"IRewardsDistributor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchClaim(address,uint256[],address[][],uint256[][],bytes32[][])\":{\"notice\":\"is a batching version of claim()\"},\"claim(address,uint256,address[],uint256[],bytes32[])\":{\"notice\":\"lets an account claim a given quantity of reward tokens.\"},\"setPeriodicRewards(bytes32)\":{\"notice\":\"allows owner to set the merkle root for the current period rewards\"},\"verifyClaim(address,uint256,address[],uint256[],bytes32[])\":{\"notice\":\"helps validate if the claim is valid\"}},\"notice\":\"interface for the RewardsDistributor contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IRewardsDistributor.sol\":\"IRewardsDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/interfaces/IRewardsDistributor.sol\":{\"keccak256\":\"0xeb90b7af033a085cfe504693e0e92b7a62e61fb0870ccd9d68798f6a056de7ce\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://31f7ee76baa2ab94c1dfdcd217c6626ee3341bc893fc25fbf3912d7c233581d5\",\"dweb:/ipfs/QmUoXqRg6uzjs6xP45seHRgJCd1ZZQ3zFJt7nKjhbiq3mf\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"INVALID_BATCH_REQ"},{"inputs":[],"type":"error","name":"INVALID_CLAIM"},{"inputs":[],"type":"error","name":"INVALID_MERKLE_ROOT"},{"inputs":[],"type":"error","name":"INVALID_RECEIVER"},{"inputs":[],"type":"error","name":"MERKLE_ROOT_NOT_SET"},{"inputs":[],"type":"error","name":"NOT_REWARDS_ADMIN"},{"inputs":[],"type":"error","name":"ZERO_ARR_LENGTH"},{"inputs":[{"internalType":"uint256","name":"periodId","type":"uint256","indexed":true},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32","indexed":false}],"type":"event","name":"PeriodicRewardsSet","anonymous":false},{"inputs":[{"internalType":"address","name":"claimer","type":"address","indexed":true},{"internalType":"address","name":"receiver","type":"address","indexed":true},{"internalType":"uint256","name":"periodId","type":"uint256","indexed":false},{"internalType":"address[]","name":"rewardTokens_","type":"address[]","indexed":false},{"internalType":"uint256[]","name":"amountsClaimed_","type":"uint256[]","indexed":false}],"type":"event","name":"RewardsClaimed","anonymous":false},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"uint256[]","name":"periodIds_","type":"uint256[]"},{"internalType":"address[][]","name":"rewardTokens_","type":"address[][]"},{"internalType":"uint256[][]","name":"amountsClaimed_","type":"uint256[][]"},{"internalType":"bytes32[][]","name":"proofs_","type":"bytes32[][]"}],"stateMutability":"nonpayable","type":"function","name":"batchClaim"},{"inputs":[{"internalType":"address","name":"receiver_","type":"address"},{"internalType":"uint256","name":"periodId_","type":"uint256"},{"internalType":"address[]","name":"rewardTokens_","type":"address[]"},{"internalType":"uint256[]","name":"amountsClaimed_","type":"uint256[]"},{"internalType":"bytes32[]","name":"proof_","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"claim"},{"inputs":[{"internalType":"bytes32","name":"root_","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"setPeriodicRewards"},{"inputs":[{"internalType":"address","name":"claimer_","type":"address"},{"internalType":"uint256","name":"periodId_","type":"uint256"},{"internalType":"address[]","name":"rewardTokens_","type":"address[]"},{"internalType":"uint256[]","name":"amountsClaimed_","type":"uint256[]"},{"internalType":"bytes32[]","name":"proof_","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"verifyClaim","outputs":[{"internalType":"bool","name":"valid","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"claim(address,uint256,address[],uint256[],bytes32[])":{"params":{"amountsClaimed_":"adre the amount of tokens to claim for each reward token","periodId_":"is the specific period to claim","proof_":"the merkle proof","receiver_":"is the receiver of the tokens to claim.","rewardTokens_":"are the address of the rewards token to claim on the specific period"}},"setPeriodicRewards(bytes32)":{"details":"[gas-opt]: function is payable to avoid msg.value checks","params":{"root_":"is the merkle root for that period generated offchain"}},"verifyClaim(address,uint256,address[],uint256[],bytes32[])":{"details":"returns false even if proof is valid and user already claimed their periodic rewards","params":{"amountsClaimed_":"adre the amount of tokens to claim for each reward token","claimer_":"is the address of the claiming wallet","periodId_":"is the period identifier","proof_":"is the merkle proof","rewardTokens_":"are the address of the rewards token to claim on the specific period"}}},"version":1},"userdoc":{"kind":"user","methods":{"batchClaim(address,uint256[],address[][],uint256[][],bytes32[][])":{"notice":"is a batching version of claim()"},"claim(address,uint256,address[],uint256[],bytes32[])":{"notice":"lets an account claim a given quantity of reward tokens."},"setPeriodicRewards(bytes32)":{"notice":"allows owner to set the merkle root for the current period rewards"},"verifyClaim(address,uint256,address[],uint256[],bytes32[])":{"notice":"helps validate if the claim is valid"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IRewardsDistributor.sol":"IRewardsDistributor"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IRewardsDistributor.sol":{"keccak256":"0xeb90b7af033a085cfe504693e0e92b7a62e61fb0870ccd9d68798f6a056de7ce","urls":["bzz-raw://31f7ee76baa2ab94c1dfdcd217c6626ee3341bc893fc25fbf3912d7c233581d5","dweb:/ipfs/QmUoXqRg6uzjs6xP45seHRgJCd1ZZQ3zFJt7nKjhbiq3mf"],"license":"BUSL-1.1"}},"version":1},"id":157}