{"abi":[{"type":"function","name":"startBridgeTokensViaCBridgeERC20Min","inputs":[{"name":"transactionId","type":"bytes32","internalType":"bytes32"},{"name":"receiver","type":"address","internalType":"address"},{"name":"destinationChainId","type":"uint64","internalType":"uint64"},{"name":"sendingAssetId","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint64","internalType":"uint64"},{"name":"maxSlippage","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"startBridgeTokensViaCBridgeERC20Packed","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"startBridgeTokensViaCBridgeNativeMin","inputs":[{"name":"transactionId","type":"bytes32","internalType":"bytes32"},{"name":"receiver","type":"address","internalType":"address"},{"name":"destinationChainId","type":"uint64","internalType":"uint64"},{"name":"nonce","type":"uint64","internalType":"uint64"},{"name":"maxSlippage","type":"uint32","internalType":"uint32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"startBridgeTokensViaCBridgeNativePacked","inputs":[],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x608060405234801561001057600080fd5b5061035b806100206000396000f3fe60806040526004361061003e5760003560e01c806278afb6146100435780630193979f1461004d578063dee4be1b14610069578063f684869714610092575b600080fd5b61004b6100a9565b005b610067600480360381019061006291906101d2565b6100ab565b005b34801561007557600080fd5b50610090600480360381019061008b9190610283565b6100b2565b005b34801561009e57600080fd5b506100a76100bb565b005b565b5050505050565b50505050505050565b565b600080fd5b6000819050919050565b6100d5816100c2565b81146100e057600080fd5b50565b6000813590506100f2816100cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610123826100f8565b9050919050565b61013381610118565b811461013e57600080fd5b50565b6000813590506101508161012a565b92915050565b600067ffffffffffffffff82169050919050565b61017381610156565b811461017e57600080fd5b50565b6000813590506101908161016a565b92915050565b600063ffffffff82169050919050565b6101af81610196565b81146101ba57600080fd5b50565b6000813590506101cc816101a6565b92915050565b600080600080600060a086880312156101ee576101ed6100bd565b5b60006101fc888289016100e3565b955050602061020d88828901610141565b945050604061021e88828901610181565b935050606061022f88828901610181565b9250506080610240888289016101bd565b9150509295509295909350565b6000819050919050565b6102608161024d565b811461026b57600080fd5b50565b60008135905061027d81610257565b92915050565b600080600080600080600060e0888a0312156102a2576102a16100bd565b5b60006102b08a828b016100e3565b97505060206102c18a828b01610141565b96505060406102d28a828b01610181565b95505060606102e38a828b01610141565b94505060806102f48a828b0161026e565b93505060a06103058a828b01610181565b92505060c06103168a828b016101bd565b9150509295989194975092955056fea2646970667358221220a976e7b1fe08527ed88c4de506b5af4dfb492abdb45464e20a3fb4805325000b64736f6c63430008170033","sourceMap":"318:1793:197:-:0;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040526004361061003e5760003560e01c806278afb6146100435780630193979f1461004d578063dee4be1b14610069578063f684869714610092575b600080fd5b61004b6100a9565b005b610067600480360381019061006291906101d2565b6100ab565b005b34801561007557600080fd5b50610090600480360381019061008b9190610283565b6100b2565b005b34801561009e57600080fd5b506100a76100bb565b005b565b5050505050565b50505050505050565b565b600080fd5b6000819050919050565b6100d5816100c2565b81146100e057600080fd5b50565b6000813590506100f2816100cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610123826100f8565b9050919050565b61013381610118565b811461013e57600080fd5b50565b6000813590506101508161012a565b92915050565b600067ffffffffffffffff82169050919050565b61017381610156565b811461017e57600080fd5b50565b6000813590506101908161016a565b92915050565b600063ffffffff82169050919050565b6101af81610196565b81146101ba57600080fd5b50565b6000813590506101cc816101a6565b92915050565b600080600080600060a086880312156101ee576101ed6100bd565b5b60006101fc888289016100e3565b955050602061020d88828901610141565b945050604061021e88828901610181565b935050606061022f88828901610181565b9250506080610240888289016101bd565b9150509295509295909350565b6000819050919050565b6102608161024d565b811461026b57600080fd5b50565b60008135905061027d81610257565b92915050565b600080600080600080600060e0888a0312156102a2576102a16100bd565b5b60006102b08a828b016100e3565b97505060206102c18a828b01610141565b96505060406102d28a828b01610181565b95505060606102e38a828b01610141565b94505060806102f48a828b0161026e565b93505060a06103058a828b01610181565b92505060c06103168a828b016101bd565b9150509295989194975092955056fea2646970667358221220a976e7b1fe08527ed88c4de506b5af4dfb492abdb45464e20a3fb4805325000b64736f6c63430008170033","sourceMap":"318:1793:197:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;488:71;;;:::i;:::-;;921:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1836:273;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1287:62;;;;;;;;;;;;;:::i;:::-;;488:71;:::o;921:234::-;;;;;;:::o;1836:273::-;;;;;;;;:::o;1287:62::-;:::o;88:117:389:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:101::-;1233:7;1273:18;1266:5;1262:30;1251:41;;1197:101;;;:::o;1304:120::-;1376:23;1393:5;1376:23;:::i;:::-;1369:5;1366:34;1356:62;;1414:1;1411;1404:12;1356:62;1304:120;:::o;1430:137::-;1475:5;1513:6;1500:20;1491:29;;1529:32;1555:5;1529:32;:::i;:::-;1430:137;;;;:::o;1573:93::-;1609:7;1649:10;1642:5;1638:22;1627:33;;1573:93;;;:::o;1672:120::-;1744:23;1761:5;1744:23;:::i;:::-;1737:5;1734:34;1724:62;;1782:1;1779;1772:12;1724:62;1672:120;:::o;1798:137::-;1843:5;1881:6;1868:20;1859:29;;1897:32;1923:5;1897:32;:::i;:::-;1798:137;;;;:::o;1941:905::-;2033:6;2041;2049;2057;2065;2114:3;2102:9;2093:7;2089:23;2085:33;2082:120;;;2121:79;;:::i;:::-;2082:120;2241:1;2266:53;2311:7;2302:6;2291:9;2287:22;2266:53;:::i;:::-;2256:63;;2212:117;2368:2;2394:53;2439:7;2430:6;2419:9;2415:22;2394:53;:::i;:::-;2384:63;;2339:118;2496:2;2522:52;2566:7;2557:6;2546:9;2542:22;2522:52;:::i;:::-;2512:62;;2467:117;2623:2;2649:52;2693:7;2684:6;2673:9;2669:22;2649:52;:::i;:::-;2639:62;;2594:117;2750:3;2777:52;2821:7;2812:6;2801:9;2797:22;2777:52;:::i;:::-;2767:62;;2721:118;1941:905;;;;;;;;:::o;2852:77::-;2889:7;2918:5;2907:16;;2852:77;;;:::o;2935:122::-;3008:24;3026:5;3008:24;:::i;:::-;3001:5;2998:35;2988:63;;3047:1;3044;3037:12;2988:63;2935:122;:::o;3063:139::-;3109:5;3147:6;3134:20;3125:29;;3163:33;3190:5;3163:33;:::i;:::-;3063:139;;;;:::o;3208:1197::-;3318:6;3326;3334;3342;3350;3358;3366;3415:3;3403:9;3394:7;3390:23;3386:33;3383:120;;;3422:79;;:::i;:::-;3383:120;3542:1;3567:53;3612:7;3603:6;3592:9;3588:22;3567:53;:::i;:::-;3557:63;;3513:117;3669:2;3695:53;3740:7;3731:6;3720:9;3716:22;3695:53;:::i;:::-;3685:63;;3640:118;3797:2;3823:52;3867:7;3858:6;3847:9;3843:22;3823:52;:::i;:::-;3813:62;;3768:117;3924:2;3950:53;3995:7;3986:6;3975:9;3971:22;3950:53;:::i;:::-;3940:63;;3895:118;4052:3;4079:53;4124:7;4115:6;4104:9;4100:22;4079:53;:::i;:::-;4069:63;;4023:119;4181:3;4208:52;4252:7;4243:6;4232:9;4228:22;4208:52;:::i;:::-;4198:62;;4152:118;4309:3;4336:52;4380:7;4371:6;4360:9;4356:22;4336:52;:::i;:::-;4326:62;;4280:118;3208:1197;;;;;;;;;;:::o","linkReferences":{}},"methodIdentifiers":{"startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)":"dee4be1b","startBridgeTokensViaCBridgeERC20Packed()":"f6848697","startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)":"0193979f","startBridgeTokensViaCBridgeNativePacked()":"0078afb6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"name\":\"startBridgeTokensViaCBridgeERC20Min\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBridgeTokensViaCBridgeERC20Packed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destinationChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"name\":\"startBridgeTokensViaCBridgeNativeMin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBridgeTokensViaCBridgeNativePacked\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"LI.FI (https://li.fi)\",\"custom:version\":\"1.0.3\",\"kind\":\"dev\",\"methods\":{\"startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)\":{\"params\":{\"amount\":\"Amount of the source asset to bridge\",\"destinationChainId\":\"Receiving chain\",\"maxSlippage\":\"Destination swap minimal accepted amount\",\"nonce\":\"A number input to guarantee uniqueness of transferId\",\"receiver\":\"Receiving wallet address\",\"sendingAssetId\":\"Address of the source asset to bridge\",\"transactionId\":\"Custom transaction ID for tracking\"}},\"startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)\":{\"params\":{\"destinationChainId\":\"Receiving chain\",\"maxSlippage\":\"Destination swap minimal accepted amount\",\"nonce\":\"A number input to guarantee uniqueness of transferId.\",\"receiver\":\"Receiving wallet address\",\"transactionId\":\"Custom transaction ID for tracking\"}}},\"title\":\"CBridge Facet Packed\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)\":{\"notice\":\"Bridges ERC20 tokens via cBridge\"},\"startBridgeTokensViaCBridgeERC20Packed()\":{\"notice\":\"Bridges ERC20 tokens via cBridge No params, all data will be extracted from manually encoded callData\"},\"startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)\":{\"notice\":\"Bridges native tokens via cBridge\"},\"startBridgeTokensViaCBridgeNativePacked()\":{\"notice\":\"Bridges Native tokens via cBridge (packed) No params, all data will be extracted from manually encoded callData\"}},\"notice\":\"Provides functionality for bridging through CBridgetaken from LiFi contracts https://github.com/lifinance/contracts and stripped down to needs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/vendor/lifi/CBridgeFacetPacked.sol\":\"CBridgeFacetPacked\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\":ERC1155A/=lib/ERC1155A/src/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\":pigeon/=lib/pigeon/src/\",\":solady/=lib/pigeon/lib/solady/\",\":solidity-stringutils/=lib/surl/lib/solidity-stringutils/\",\":solmate/=lib/ERC1155A/lib/solmate/src/\",\":super-vaults/=lib/super-vaults/src/\",\":surl/=lib/surl/\",\":v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\":v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\":v3-core/=lib/super-vaults/lib/v3-core/\"]},\"sources\":{\"src/vendor/lifi/CBridgeFacetPacked.sol\":{\"keccak256\":\"0xb45096db7bc7b94e66a11ed6c5f49e503d9874add88e61caae89d78d86837901\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a7519fd80e3534f89c1dfe22928e016f20dceefef4ca0fe41a79eb2d381a2e4f\",\"dweb:/ipfs/QmQdeiBQPucxLe3RmuVqcfcxSCMQKmfJ3YirkRoqCV86f4\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint64","name":"destinationChainId","type":"uint64"},{"internalType":"address","name":"sendingAssetId","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"uint32","name":"maxSlippage","type":"uint32"}],"stateMutability":"nonpayable","type":"function","name":"startBridgeTokensViaCBridgeERC20Min"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"startBridgeTokensViaCBridgeERC20Packed"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint64","name":"destinationChainId","type":"uint64"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"uint32","name":"maxSlippage","type":"uint32"}],"stateMutability":"payable","type":"function","name":"startBridgeTokensViaCBridgeNativeMin"},{"inputs":[],"stateMutability":"payable","type":"function","name":"startBridgeTokensViaCBridgeNativePacked"}],"devdoc":{"kind":"dev","methods":{"startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)":{"params":{"amount":"Amount of the source asset to bridge","destinationChainId":"Receiving chain","maxSlippage":"Destination swap minimal accepted amount","nonce":"A number input to guarantee uniqueness of transferId","receiver":"Receiving wallet address","sendingAssetId":"Address of the source asset to bridge","transactionId":"Custom transaction ID for tracking"}},"startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)":{"params":{"destinationChainId":"Receiving chain","maxSlippage":"Destination swap minimal accepted amount","nonce":"A number input to guarantee uniqueness of transferId.","receiver":"Receiving wallet address","transactionId":"Custom transaction ID for tracking"}}},"version":1},"userdoc":{"kind":"user","methods":{"startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)":{"notice":"Bridges ERC20 tokens via cBridge"},"startBridgeTokensViaCBridgeERC20Packed()":{"notice":"Bridges ERC20 tokens via cBridge No params, all data will be extracted from manually encoded callData"},"startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)":{"notice":"Bridges native tokens via cBridge"},"startBridgeTokensViaCBridgeNativePacked()":{"notice":"Bridges Native tokens via cBridge (packed) No params, all data will be extracted from manually encoded callData"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/","ERC1155A/=lib/ERC1155A/src/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/","pigeon/=lib/pigeon/src/","solady/=lib/pigeon/lib/solady/","solidity-stringutils/=lib/surl/lib/solidity-stringutils/","solmate/=lib/ERC1155A/lib/solmate/src/","super-vaults/=lib/super-vaults/src/","surl/=lib/surl/","v2-core/=lib/super-vaults/lib/v2-core/contracts/","v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/","v3-core/=lib/super-vaults/lib/v3-core/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/vendor/lifi/CBridgeFacetPacked.sol":"CBridgeFacetPacked"},"evmVersion":"paris","libraries":{}},"sources":{"src/vendor/lifi/CBridgeFacetPacked.sol":{"keccak256":"0xb45096db7bc7b94e66a11ed6c5f49e503d9874add88e61caae89d78d86837901","urls":["bzz-raw://a7519fd80e3534f89c1dfe22928e016f20dceefef4ca0fe41a79eb2d381a2e4f","dweb:/ipfs/QmQdeiBQPucxLe3RmuVqcfcxSCMQKmfJ3YirkRoqCV86f4"],"license":"MIT"}},"version":1},"id":197}